/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_pjsua2JNI = NULL;
    jmethodID director_method_ids[42];
  }
}

#include "pjsua2.hpp"
using namespace std;
using namespace pj;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int_Sg__doSize(std::vector< int > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_0(std::vector< int > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_1(std::vector< int > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doRemove(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__doGet(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doSet(std::vector< int > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__doRemoveRange(std::vector< int > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipHeader > *new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(jint count,pj::SipHeader const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::SipHeader >(static_cast<std::vector< pj::SipHeader >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_SipHeader_Sg__doSize(std::vector< pj::SipHeader > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__doAdd__SWIG_0(std::vector< pj::SipHeader > *self,std::vector< pj::SipHeader >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__doAdd__SWIG_1(std::vector< pj::SipHeader > *self,jint index,std::vector< pj::SipHeader >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipHeader >::value_type std_vector_Sl_pj_SipHeader_Sg__doRemove(std::vector< pj::SipHeader > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::SipHeader const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipHeader >::value_type const &std_vector_Sl_pj_SipHeader_Sg__doGet(std::vector< pj::SipHeader > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::SipHeader >::value_type std_vector_Sl_pj_SipHeader_Sg__doSet(std::vector< pj::SipHeader > *self,jint index,std::vector< pj::SipHeader >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::SipHeader const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__doRemoveRange(std::vector< pj::SipHeader > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(jint count,pj::AuthCredInfo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::AuthCredInfo >(static_cast<std::vector< pj::AuthCredInfo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_AuthCredInfo_Sg__doSize(std::vector< pj::AuthCredInfo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__doAdd__SWIG_0(std::vector< pj::AuthCredInfo > *self,std::vector< pj::AuthCredInfo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__doAdd__SWIG_1(std::vector< pj::AuthCredInfo > *self,jint index,std::vector< pj::AuthCredInfo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AuthCredInfo >::value_type std_vector_Sl_pj_AuthCredInfo_Sg__doRemove(std::vector< pj::AuthCredInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::AuthCredInfo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AuthCredInfo >::value_type const &std_vector_Sl_pj_AuthCredInfo_Sg__doGet(std::vector< pj::AuthCredInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::AuthCredInfo >::value_type std_vector_Sl_pj_AuthCredInfo_Sg__doSet(std::vector< pj::AuthCredInfo > *self,jint index,std::vector< pj::AuthCredInfo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::AuthCredInfo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__doRemoveRange(std::vector< pj::AuthCredInfo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(jint count,pj::SrtpCrypto const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::SrtpCrypto >(static_cast<std::vector< pj::SrtpCrypto >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_SrtpCrypto_Sg__doSize(std::vector< pj::SrtpCrypto > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__doAdd__SWIG_0(std::vector< pj::SrtpCrypto > *self,std::vector< pj::SrtpCrypto >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__doAdd__SWIG_1(std::vector< pj::SrtpCrypto > *self,jint index,std::vector< pj::SrtpCrypto >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SrtpCrypto >::value_type std_vector_Sl_pj_SrtpCrypto_Sg__doRemove(std::vector< pj::SrtpCrypto > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::SrtpCrypto const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SrtpCrypto >::value_type const &std_vector_Sl_pj_SrtpCrypto_Sg__doGet(std::vector< pj::SrtpCrypto > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::SrtpCrypto >::value_type std_vector_Sl_pj_SrtpCrypto_Sg__doSet(std::vector< pj::SrtpCrypto > *self,jint index,std::vector< pj::SrtpCrypto >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::SrtpCrypto const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__doRemoveRange(std::vector< pj::SrtpCrypto > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(jint count,pj::SipMultipartPart const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::SipMultipartPart >(static_cast<std::vector< pj::SipMultipartPart >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_SipMultipartPart_Sg__doSize(std::vector< pj::SipMultipartPart > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__doAdd__SWIG_0(std::vector< pj::SipMultipartPart > *self,std::vector< pj::SipMultipartPart >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__doAdd__SWIG_1(std::vector< pj::SipMultipartPart > *self,jint index,std::vector< pj::SipMultipartPart >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipMultipartPart >::value_type std_vector_Sl_pj_SipMultipartPart_Sg__doRemove(std::vector< pj::SipMultipartPart > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::SipMultipartPart const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SipMultipartPart >::value_type const &std_vector_Sl_pj_SipMultipartPart_Sg__doGet(std::vector< pj::SipMultipartPart > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::SipMultipartPart >::value_type std_vector_Sl_pj_SipMultipartPart_Sg__doSet(std::vector< pj::SipMultipartPart > *self,jint index,std::vector< pj::SipMultipartPart >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::SipMultipartPart const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__doRemoveRange(std::vector< pj::SipMultipartPart > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy * > *new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(jint count,pj::Buddy *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::Buddy * >(static_cast<std::vector< pj::Buddy * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_Buddy_Sm__Sg__doSize(std::vector< pj::Buddy * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__doAdd__SWIG_0(std::vector< pj::Buddy * > *self,std::vector< pj::Buddy * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__doAdd__SWIG_1(std::vector< pj::Buddy * > *self,jint index,std::vector< pj::Buddy * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy * >::value_type std_vector_Sl_pj_Buddy_Sm__Sg__doRemove(std::vector< pj::Buddy * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::Buddy * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy * >::value_type const &std_vector_Sl_pj_Buddy_Sm__Sg__doGet(std::vector< pj::Buddy * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::Buddy * >::value_type std_vector_Sl_pj_Buddy_Sm__Sg__doSet(std::vector< pj::Buddy * > *self,jint index,std::vector< pj::Buddy * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::Buddy * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__doRemoveRange(std::vector< pj::Buddy * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy > *new_std_vector_Sl_pj_Buddy_Sg___SWIG_2(jint count,pj::Buddy const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::Buddy >(static_cast<std::vector< pj::Buddy >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_Buddy_Sg__doSize(std::vector< pj::Buddy > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__doAdd__SWIG_0(std::vector< pj::Buddy > *self,std::vector< pj::Buddy >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__doAdd__SWIG_1(std::vector< pj::Buddy > *self,jint index,std::vector< pj::Buddy >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy >::value_type std_vector_Sl_pj_Buddy_Sg__doRemove(std::vector< pj::Buddy > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::Buddy const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::Buddy >::value_type const &std_vector_Sl_pj_Buddy_Sg__doGet(std::vector< pj::Buddy > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::Buddy >::value_type std_vector_Sl_pj_Buddy_Sg__doSet(std::vector< pj::Buddy > *self,jint index,std::vector< pj::Buddy >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::Buddy const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__doRemoveRange(std::vector< pj::Buddy > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia * > *new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(jint count,pj::AudioMedia *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::AudioMedia * >(static_cast<std::vector< pj::AudioMedia * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_AudioMedia_Sm__Sg__doSize(std::vector< pj::AudioMedia * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__doAdd__SWIG_0(std::vector< pj::AudioMedia * > *self,std::vector< pj::AudioMedia * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__doAdd__SWIG_1(std::vector< pj::AudioMedia * > *self,jint index,std::vector< pj::AudioMedia * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia * >::value_type std_vector_Sl_pj_AudioMedia_Sm__Sg__doRemove(std::vector< pj::AudioMedia * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::AudioMedia * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia * >::value_type const &std_vector_Sl_pj_AudioMedia_Sm__Sg__doGet(std::vector< pj::AudioMedia * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::AudioMedia * >::value_type std_vector_Sl_pj_AudioMedia_Sm__Sg__doSet(std::vector< pj::AudioMedia * > *self,jint index,std::vector< pj::AudioMedia * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::AudioMedia * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__doRemoveRange(std::vector< pj::AudioMedia * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia > *new_std_vector_Sl_pj_AudioMedia_Sg___SWIG_2(jint count,pj::AudioMedia const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::AudioMedia >(static_cast<std::vector< pj::AudioMedia >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_AudioMedia_Sg__doSize(std::vector< pj::AudioMedia > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__doAdd__SWIG_0(std::vector< pj::AudioMedia > *self,std::vector< pj::AudioMedia >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__doAdd__SWIG_1(std::vector< pj::AudioMedia > *self,jint index,std::vector< pj::AudioMedia >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia >::value_type std_vector_Sl_pj_AudioMedia_Sg__doRemove(std::vector< pj::AudioMedia > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::AudioMedia const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioMedia >::value_type const &std_vector_Sl_pj_AudioMedia_Sg__doGet(std::vector< pj::AudioMedia > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::AudioMedia >::value_type std_vector_Sl_pj_AudioMedia_Sg__doSet(std::vector< pj::AudioMedia > *self,jint index,std::vector< pj::AudioMedia >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::AudioMedia const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__doRemoveRange(std::vector< pj::AudioMedia > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoMedia > *new_std_vector_Sl_pj_VideoMedia_Sg___SWIG_2(jint count,pj::VideoMedia const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::VideoMedia >(static_cast<std::vector< pj::VideoMedia >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_VideoMedia_Sg__doSize(std::vector< pj::VideoMedia > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__doAdd__SWIG_0(std::vector< pj::VideoMedia > *self,std::vector< pj::VideoMedia >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__doAdd__SWIG_1(std::vector< pj::VideoMedia > *self,jint index,std::vector< pj::VideoMedia >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoMedia >::value_type std_vector_Sl_pj_VideoMedia_Sg__doRemove(std::vector< pj::VideoMedia > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::VideoMedia const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoMedia >::value_type const &std_vector_Sl_pj_VideoMedia_Sg__doGet(std::vector< pj::VideoMedia > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::VideoMedia >::value_type std_vector_Sl_pj_VideoMedia_Sg__doSet(std::vector< pj::VideoMedia > *self,jint index,std::vector< pj::VideoMedia >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::VideoMedia const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__doRemoveRange(std::vector< pj::VideoMedia > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDesc > *new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(jint count,pj::ToneDesc const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::ToneDesc >(static_cast<std::vector< pj::ToneDesc >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_ToneDesc_Sg__doSize(std::vector< pj::ToneDesc > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__doAdd__SWIG_0(std::vector< pj::ToneDesc > *self,std::vector< pj::ToneDesc >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__doAdd__SWIG_1(std::vector< pj::ToneDesc > *self,jint index,std::vector< pj::ToneDesc >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDesc >::value_type std_vector_Sl_pj_ToneDesc_Sg__doRemove(std::vector< pj::ToneDesc > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::ToneDesc const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDesc >::value_type const &std_vector_Sl_pj_ToneDesc_Sg__doGet(std::vector< pj::ToneDesc > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::ToneDesc >::value_type std_vector_Sl_pj_ToneDesc_Sg__doSet(std::vector< pj::ToneDesc > *self,jint index,std::vector< pj::ToneDesc >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::ToneDesc const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__doRemoveRange(std::vector< pj::ToneDesc > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigit > *new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(jint count,pj::ToneDigit const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::ToneDigit >(static_cast<std::vector< pj::ToneDigit >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_ToneDigit_Sg__doSize(std::vector< pj::ToneDigit > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__doAdd__SWIG_0(std::vector< pj::ToneDigit > *self,std::vector< pj::ToneDigit >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__doAdd__SWIG_1(std::vector< pj::ToneDigit > *self,jint index,std::vector< pj::ToneDigit >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigit >::value_type std_vector_Sl_pj_ToneDigit_Sg__doRemove(std::vector< pj::ToneDigit > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::ToneDigit const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigit >::value_type const &std_vector_Sl_pj_ToneDigit_Sg__doGet(std::vector< pj::ToneDigit > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::ToneDigit >::value_type std_vector_Sl_pj_ToneDigit_Sg__doSet(std::vector< pj::ToneDigit > *self,jint index,std::vector< pj::ToneDigit >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::ToneDigit const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__doRemoveRange(std::vector< pj::ToneDigit > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(jint count,pj::ToneDigitMapDigit const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::ToneDigitMapDigit >(static_cast<std::vector< pj::ToneDigitMapDigit >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_ToneDigitMapDigit_Sg__doSize(std::vector< pj::ToneDigitMapDigit > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__doAdd__SWIG_0(std::vector< pj::ToneDigitMapDigit > *self,std::vector< pj::ToneDigitMapDigit >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__doAdd__SWIG_1(std::vector< pj::ToneDigitMapDigit > *self,jint index,std::vector< pj::ToneDigitMapDigit >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit >::value_type std_vector_Sl_pj_ToneDigitMapDigit_Sg__doRemove(std::vector< pj::ToneDigitMapDigit > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::ToneDigitMapDigit const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit >::value_type const &std_vector_Sl_pj_ToneDigitMapDigit_Sg__doGet(std::vector< pj::ToneDigitMapDigit > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit >::value_type std_vector_Sl_pj_ToneDigitMapDigit_Sg__doSet(std::vector< pj::ToneDigitMapDigit > *self,jint index,std::vector< pj::ToneDigitMapDigit >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::ToneDigitMapDigit const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__doRemoveRange(std::vector< pj::ToneDigitMapDigit > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(jint count,pj::AudioDevInfo *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::AudioDevInfo * >(static_cast<std::vector< pj::AudioDevInfo * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doSize(std::vector< pj::AudioDevInfo * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doAdd__SWIG_0(std::vector< pj::AudioDevInfo * > *self,std::vector< pj::AudioDevInfo * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doAdd__SWIG_1(std::vector< pj::AudioDevInfo * > *self,jint index,std::vector< pj::AudioDevInfo * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo * >::value_type std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doRemove(std::vector< pj::AudioDevInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::AudioDevInfo * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo * >::value_type const &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doGet(std::vector< pj::AudioDevInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::AudioDevInfo * >::value_type std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doSet(std::vector< pj::AudioDevInfo * > *self,jint index,std::vector< pj::AudioDevInfo * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::AudioDevInfo * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doRemoveRange(std::vector< pj::AudioDevInfo * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo > *new_std_vector_Sl_pj_AudioDevInfo_Sg___SWIG_2(jint count,pj::AudioDevInfo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::AudioDevInfo >(static_cast<std::vector< pj::AudioDevInfo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_AudioDevInfo_Sg__doSize(std::vector< pj::AudioDevInfo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__doAdd__SWIG_0(std::vector< pj::AudioDevInfo > *self,std::vector< pj::AudioDevInfo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__doAdd__SWIG_1(std::vector< pj::AudioDevInfo > *self,jint index,std::vector< pj::AudioDevInfo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo >::value_type std_vector_Sl_pj_AudioDevInfo_Sg__doRemove(std::vector< pj::AudioDevInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::AudioDevInfo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::AudioDevInfo >::value_type const &std_vector_Sl_pj_AudioDevInfo_Sg__doGet(std::vector< pj::AudioDevInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::AudioDevInfo >::value_type std_vector_Sl_pj_AudioDevInfo_Sg__doSet(std::vector< pj::AudioDevInfo > *self,jint index,std::vector< pj::AudioDevInfo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::AudioDevInfo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__doRemoveRange(std::vector< pj::AudioDevInfo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo * > *new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(jint count,pj::CodecInfo *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::CodecInfo * >(static_cast<std::vector< pj::CodecInfo * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_CodecInfo_Sm__Sg__doSize(std::vector< pj::CodecInfo * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__doAdd__SWIG_0(std::vector< pj::CodecInfo * > *self,std::vector< pj::CodecInfo * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__doAdd__SWIG_1(std::vector< pj::CodecInfo * > *self,jint index,std::vector< pj::CodecInfo * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo * >::value_type std_vector_Sl_pj_CodecInfo_Sm__Sg__doRemove(std::vector< pj::CodecInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::CodecInfo * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo * >::value_type const &std_vector_Sl_pj_CodecInfo_Sm__Sg__doGet(std::vector< pj::CodecInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::CodecInfo * >::value_type std_vector_Sl_pj_CodecInfo_Sm__Sg__doSet(std::vector< pj::CodecInfo * > *self,jint index,std::vector< pj::CodecInfo * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::CodecInfo * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__doRemoveRange(std::vector< pj::CodecInfo * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo > *new_std_vector_Sl_pj_CodecInfo_Sg___SWIG_2(jint count,pj::CodecInfo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::CodecInfo >(static_cast<std::vector< pj::CodecInfo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_CodecInfo_Sg__doSize(std::vector< pj::CodecInfo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__doAdd__SWIG_0(std::vector< pj::CodecInfo > *self,std::vector< pj::CodecInfo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__doAdd__SWIG_1(std::vector< pj::CodecInfo > *self,jint index,std::vector< pj::CodecInfo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo >::value_type std_vector_Sl_pj_CodecInfo_Sg__doRemove(std::vector< pj::CodecInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::CodecInfo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecInfo >::value_type const &std_vector_Sl_pj_CodecInfo_Sg__doGet(std::vector< pj::CodecInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::CodecInfo >::value_type std_vector_Sl_pj_CodecInfo_Sg__doSet(std::vector< pj::CodecInfo > *self,jint index,std::vector< pj::CodecInfo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::CodecInfo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__doRemoveRange(std::vector< pj::CodecInfo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(jint count,pj::VideoDevInfo *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::VideoDevInfo * >(static_cast<std::vector< pj::VideoDevInfo * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doSize(std::vector< pj::VideoDevInfo * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doAdd__SWIG_0(std::vector< pj::VideoDevInfo * > *self,std::vector< pj::VideoDevInfo * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doAdd__SWIG_1(std::vector< pj::VideoDevInfo * > *self,jint index,std::vector< pj::VideoDevInfo * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo * >::value_type std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doRemove(std::vector< pj::VideoDevInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::VideoDevInfo * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo * >::value_type const &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doGet(std::vector< pj::VideoDevInfo * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::VideoDevInfo * >::value_type std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doSet(std::vector< pj::VideoDevInfo * > *self,jint index,std::vector< pj::VideoDevInfo * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::VideoDevInfo * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doRemoveRange(std::vector< pj::VideoDevInfo * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo > *new_std_vector_Sl_pj_VideoDevInfo_Sg___SWIG_2(jint count,pj::VideoDevInfo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::VideoDevInfo >(static_cast<std::vector< pj::VideoDevInfo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_VideoDevInfo_Sg__doSize(std::vector< pj::VideoDevInfo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__doAdd__SWIG_0(std::vector< pj::VideoDevInfo > *self,std::vector< pj::VideoDevInfo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__doAdd__SWIG_1(std::vector< pj::VideoDevInfo > *self,jint index,std::vector< pj::VideoDevInfo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo >::value_type std_vector_Sl_pj_VideoDevInfo_Sg__doRemove(std::vector< pj::VideoDevInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::VideoDevInfo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::VideoDevInfo >::value_type const &std_vector_Sl_pj_VideoDevInfo_Sg__doGet(std::vector< pj::VideoDevInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::VideoDevInfo >::value_type std_vector_Sl_pj_VideoDevInfo_Sg__doSet(std::vector< pj::VideoDevInfo > *self,jint index,std::vector< pj::VideoDevInfo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::VideoDevInfo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__doRemoveRange(std::vector< pj::VideoDevInfo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecFmtp > *new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(jint count,pj::CodecFmtp const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::CodecFmtp >(static_cast<std::vector< pj::CodecFmtp >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_CodecFmtp_Sg__doSize(std::vector< pj::CodecFmtp > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__doAdd__SWIG_0(std::vector< pj::CodecFmtp > *self,std::vector< pj::CodecFmtp >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__doAdd__SWIG_1(std::vector< pj::CodecFmtp > *self,jint index,std::vector< pj::CodecFmtp >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecFmtp >::value_type std_vector_Sl_pj_CodecFmtp_Sg__doRemove(std::vector< pj::CodecFmtp > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::CodecFmtp const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CodecFmtp >::value_type const &std_vector_Sl_pj_CodecFmtp_Sg__doGet(std::vector< pj::CodecFmtp > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::CodecFmtp >::value_type std_vector_Sl_pj_CodecFmtp_Sg__doSet(std::vector< pj::CodecFmtp > *self,jint index,std::vector< pj::CodecFmtp >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::CodecFmtp const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__doRemoveRange(std::vector< pj::CodecFmtp > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatAudio > *new_std_vector_Sl_pj_MediaFormatAudio_Sg___SWIG_2(jint count,pj::MediaFormatAudio const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::MediaFormatAudio >(static_cast<std::vector< pj::MediaFormatAudio >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_MediaFormatAudio_Sg__doSize(std::vector< pj::MediaFormatAudio > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__doAdd__SWIG_0(std::vector< pj::MediaFormatAudio > *self,std::vector< pj::MediaFormatAudio >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__doAdd__SWIG_1(std::vector< pj::MediaFormatAudio > *self,jint index,std::vector< pj::MediaFormatAudio >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatAudio >::value_type std_vector_Sl_pj_MediaFormatAudio_Sg__doRemove(std::vector< pj::MediaFormatAudio > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::MediaFormatAudio const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatAudio >::value_type const &std_vector_Sl_pj_MediaFormatAudio_Sg__doGet(std::vector< pj::MediaFormatAudio > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::MediaFormatAudio >::value_type std_vector_Sl_pj_MediaFormatAudio_Sg__doSet(std::vector< pj::MediaFormatAudio > *self,jint index,std::vector< pj::MediaFormatAudio >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::MediaFormatAudio const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__doRemoveRange(std::vector< pj::MediaFormatAudio > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatVideo > *new_std_vector_Sl_pj_MediaFormatVideo_Sg___SWIG_2(jint count,pj::MediaFormatVideo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::MediaFormatVideo >(static_cast<std::vector< pj::MediaFormatVideo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_MediaFormatVideo_Sg__doSize(std::vector< pj::MediaFormatVideo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__doAdd__SWIG_0(std::vector< pj::MediaFormatVideo > *self,std::vector< pj::MediaFormatVideo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__doAdd__SWIG_1(std::vector< pj::MediaFormatVideo > *self,jint index,std::vector< pj::MediaFormatVideo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatVideo >::value_type std_vector_Sl_pj_MediaFormatVideo_Sg__doRemove(std::vector< pj::MediaFormatVideo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::MediaFormatVideo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::MediaFormatVideo >::value_type const &std_vector_Sl_pj_MediaFormatVideo_Sg__doGet(std::vector< pj::MediaFormatVideo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::MediaFormatVideo >::value_type std_vector_Sl_pj_MediaFormatVideo_Sg__doSet(std::vector< pj::MediaFormatVideo > *self,jint index,std::vector< pj::MediaFormatVideo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::MediaFormatVideo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__doRemoveRange(std::vector< pj::MediaFormatVideo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(jint count,pj::CallMediaInfo const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::CallMediaInfo >(static_cast<std::vector< pj::CallMediaInfo >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_CallMediaInfo_Sg__doSize(std::vector< pj::CallMediaInfo > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__doAdd__SWIG_0(std::vector< pj::CallMediaInfo > *self,std::vector< pj::CallMediaInfo >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__doAdd__SWIG_1(std::vector< pj::CallMediaInfo > *self,jint index,std::vector< pj::CallMediaInfo >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CallMediaInfo >::value_type std_vector_Sl_pj_CallMediaInfo_Sg__doRemove(std::vector< pj::CallMediaInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::CallMediaInfo const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::CallMediaInfo >::value_type const &std_vector_Sl_pj_CallMediaInfo_Sg__doGet(std::vector< pj::CallMediaInfo > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::CallMediaInfo >::value_type std_vector_Sl_pj_CallMediaInfo_Sg__doSet(std::vector< pj::CallMediaInfo > *self,jint index,std::vector< pj::CallMediaInfo >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::CallMediaInfo const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__doRemoveRange(std::vector< pj::CallMediaInfo > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::RtcpFbCap > *new_std_vector_Sl_pj_RtcpFbCap_Sg___SWIG_2(jint count,pj::RtcpFbCap const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::RtcpFbCap >(static_cast<std::vector< pj::RtcpFbCap >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_RtcpFbCap_Sg__doSize(std::vector< pj::RtcpFbCap > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__doAdd__SWIG_0(std::vector< pj::RtcpFbCap > *self,std::vector< pj::RtcpFbCap >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__doAdd__SWIG_1(std::vector< pj::RtcpFbCap > *self,jint index,std::vector< pj::RtcpFbCap >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::RtcpFbCap >::value_type std_vector_Sl_pj_RtcpFbCap_Sg__doRemove(std::vector< pj::RtcpFbCap > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::RtcpFbCap const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::RtcpFbCap >::value_type const &std_vector_Sl_pj_RtcpFbCap_Sg__doGet(std::vector< pj::RtcpFbCap > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::RtcpFbCap >::value_type std_vector_Sl_pj_RtcpFbCap_Sg__doSet(std::vector< pj::RtcpFbCap > *self,jint index,std::vector< pj::RtcpFbCap >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::RtcpFbCap const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__doRemoveRange(std::vector< pj::RtcpFbCap > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SslCertName > *new_std_vector_Sl_pj_SslCertName_Sg___SWIG_2(jint count,pj::SslCertName const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< pj::SslCertName >(static_cast<std::vector< pj::SslCertName >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_pj_SslCertName_Sg__doSize(std::vector< pj::SslCertName > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__doAdd__SWIG_0(std::vector< pj::SslCertName > *self,std::vector< pj::SslCertName >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__doAdd__SWIG_1(std::vector< pj::SslCertName > *self,jint index,std::vector< pj::SslCertName >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SslCertName >::value_type std_vector_Sl_pj_SslCertName_Sg__doRemove(std::vector< pj::SslCertName > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          pj::SslCertName const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< pj::SslCertName >::value_type const &std_vector_Sl_pj_SslCertName_Sg__doGet(std::vector< pj::SslCertName > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< pj::SslCertName >::value_type std_vector_Sl_pj_SslCertName_Sg__doSet(std::vector< pj::SslCertName > *self,jint index,std::vector< pj::SslCertName >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          pj::SslCertName const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__doRemoveRange(std::vector< pj::SslCertName > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN void pj_WindowHandle_setWindow(pj::WindowHandle *self,long long hwnd){ self->window = (void*)hwnd; }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pjsua2_wrap.h"

SwigDirector_AudioMediaPlayer::SwigDirector_AudioMediaPlayer(JNIEnv *jenv) : pj::AudioMediaPlayer(), Swig::Director(jenv) {
}

SwigDirector_AudioMediaPlayer::~SwigDirector_AudioMediaPlayer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AudioMediaPlayer::onEof2() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    pj::AudioMediaPlayer::onEof2();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::AudioMediaPlayer::onEof2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AudioMediaPlayer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onEof2", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/AudioMediaPlayer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Buddy::SwigDirector_Buddy(JNIEnv *jenv) : pj::Buddy(), Swig::Director(jenv) {
}

SwigDirector_Buddy::~SwigDirector_Buddy() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Buddy::onBuddyState() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    pj::Buddy::onBuddyState();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Buddy::onBuddyState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Buddy::onBuddyEvSubState(pj::OnBuddyEvSubStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[1]) {
    pj::Buddy::onBuddyEvSubState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnBuddyEvSubStateParam **)&jprm = (pj::OnBuddyEvSubStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[2], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Buddy::onBuddyEvSubState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Buddy::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onBuddyState", "()V", NULL 
    },
    {
      "onBuddyEvSubState", "(Lorg/pjsip/pjsua2/OnBuddyEvSubStateParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/Buddy");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_FindBuddyMatch::SwigDirector_FindBuddyMatch(JNIEnv *jenv) : pj::FindBuddyMatch(), Swig::Director(jenv) {
}

bool SwigDirector_FindBuddyMatch::match(pj::string const &token, pj::Buddy const &buddy) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtoken = 0 ;
  jlong jbuddy = 0 ;
  
  if (!swig_override[0]) {
    return pj::FindBuddyMatch::match(token,buddy);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtoken = jenv->NewStringUTF((&token)->c_str());
    Swig::LocalRefGuard token_refguard(jenv, jtoken); 
    *(pj::Buddy **)&jbuddy = (pj::Buddy *) &buddy; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[3], swigjobj, jtoken, jbuddy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::FindBuddyMatch::match ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_FindBuddyMatch::~SwigDirector_FindBuddyMatch() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_FindBuddyMatch::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "match", "(Ljava/lang/String;Lorg/pjsip/pjsua2/Buddy;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/FindBuddyMatch");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Account::SwigDirector_Account(JNIEnv *jenv) : pj::Account(), Swig::Director(jenv) {
}

SwigDirector_Account::~SwigDirector_Account() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Account::onIncomingCall(pj::OnIncomingCallParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[0]) {
    pj::Account::onIncomingCall(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnIncomingCallParam **)&jprm = (pj::OnIncomingCallParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[4], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onIncomingCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onRegStarted(pj::OnRegStartedParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[1]) {
    pj::Account::onRegStarted(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnRegStartedParam **)&jprm = (pj::OnRegStartedParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[5], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onRegStarted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onRegState(pj::OnRegStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[2]) {
    pj::Account::onRegState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnRegStateParam **)&jprm = (pj::OnRegStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[6], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onRegState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onIncomingSubscribe(pj::OnIncomingSubscribeParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[3]) {
    pj::Account::onIncomingSubscribe(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnIncomingSubscribeParam **)&jprm = (pj::OnIncomingSubscribeParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[7], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onIncomingSubscribe ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onInstantMessage(pj::OnInstantMessageParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[4]) {
    pj::Account::onInstantMessage(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnInstantMessageParam **)&jprm = (pj::OnInstantMessageParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[8], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onInstantMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[5]) {
    pj::Account::onInstantMessageStatus(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnInstantMessageStatusParam **)&jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[9], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onInstantMessageStatus ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[6]) {
    pj::Account::onTypingIndication(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnTypingIndicationParam **)&jprm = (pj::OnTypingIndicationParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[10], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onTypingIndication ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::onMwiInfo(pj::OnMwiInfoParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[7]) {
    pj::Account::onMwiInfo(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnMwiInfoParam **)&jprm = (pj::OnMwiInfoParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[11], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Account::onMwiInfo ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Account::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onIncomingCall", "(Lorg/pjsip/pjsua2/OnIncomingCallParam;)V", NULL 
    },
    {
      "onRegStarted", "(Lorg/pjsip/pjsua2/OnRegStartedParam;)V", NULL 
    },
    {
      "onRegState", "(Lorg/pjsip/pjsua2/OnRegStateParam;)V", NULL 
    },
    {
      "onIncomingSubscribe", "(Lorg/pjsip/pjsua2/OnIncomingSubscribeParam;)V", NULL 
    },
    {
      "onInstantMessage", "(Lorg/pjsip/pjsua2/OnInstantMessageParam;)V", NULL 
    },
    {
      "onInstantMessageStatus", "(Lorg/pjsip/pjsua2/OnInstantMessageStatusParam;)V", NULL 
    },
    {
      "onTypingIndication", "(Lorg/pjsip/pjsua2/OnTypingIndicationParam;)V", NULL 
    },
    {
      "onMwiInfo", "(Lorg/pjsip/pjsua2/OnMwiInfoParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/Account");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Call::SwigDirector_Call(JNIEnv *jenv, pj::Account &acc, int call_id) : pj::Call(acc, call_id), Swig::Director(jenv) {
}

SwigDirector_Call::~SwigDirector_Call() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Call::onCallState(pj::OnCallStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[0]) {
    pj::Call::onCallState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallStateParam **)&jprm = (pj::OnCallStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[12], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallTsxState(pj::OnCallTsxStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[1]) {
    pj::Call::onCallTsxState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallTsxStateParam **)&jprm = (pj::OnCallTsxStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[13], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallTsxState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallMediaState(pj::OnCallMediaStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[2]) {
    pj::Call::onCallMediaState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallMediaStateParam **)&jprm = (pj::OnCallMediaStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[14], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallMediaState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallSdpCreated(pj::OnCallSdpCreatedParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[3]) {
    pj::Call::onCallSdpCreated(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallSdpCreatedParam **)&jprm = (pj::OnCallSdpCreatedParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[15], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallSdpCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onStreamCreated(pj::OnStreamCreatedParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[4]) {
    pj::Call::onStreamCreated(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnStreamCreatedParam **)&jprm = (pj::OnStreamCreatedParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[16], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onStreamCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onStreamDestroyed(pj::OnStreamDestroyedParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[5]) {
    pj::Call::onStreamDestroyed(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnStreamDestroyedParam **)&jprm = (pj::OnStreamDestroyedParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[17], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onStreamDestroyed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onDtmfDigit(pj::OnDtmfDigitParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[6]) {
    pj::Call::onDtmfDigit(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnDtmfDigitParam **)&jprm = (pj::OnDtmfDigitParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[18], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onDtmfDigit ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallTransferRequest(pj::OnCallTransferRequestParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[7]) {
    pj::Call::onCallTransferRequest(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallTransferRequestParam **)&jprm = (pj::OnCallTransferRequestParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[19], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallTransferRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallTransferStatus(pj::OnCallTransferStatusParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[8]) {
    pj::Call::onCallTransferStatus(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallTransferStatusParam **)&jprm = (pj::OnCallTransferStatusParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[20], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallTransferStatus ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallReplaceRequest(pj::OnCallReplaceRequestParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[9]) {
    pj::Call::onCallReplaceRequest(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallReplaceRequestParam **)&jprm = (pj::OnCallReplaceRequestParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[21], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallReplaceRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallReplaced(pj::OnCallReplacedParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[10]) {
    pj::Call::onCallReplaced(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallReplacedParam **)&jprm = (pj::OnCallReplacedParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[22], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallReplaced ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallRxOffer(pj::OnCallRxOfferParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[11]) {
    pj::Call::onCallRxOffer(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallRxOfferParam **)&jprm = (pj::OnCallRxOfferParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[23], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallRxOffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallRxReinvite(pj::OnCallRxReinviteParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[12]) {
    pj::Call::onCallRxReinvite(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallRxReinviteParam **)&jprm = (pj::OnCallRxReinviteParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[24], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallRxReinvite ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallTxOffer(pj::OnCallTxOfferParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[13]) {
    pj::Call::onCallTxOffer(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallTxOfferParam **)&jprm = (pj::OnCallTxOfferParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[25], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallTxOffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onInstantMessage(pj::OnInstantMessageParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[14]) {
    pj::Call::onInstantMessage(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnInstantMessageParam **)&jprm = (pj::OnInstantMessageParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[26], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onInstantMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[15]) {
    pj::Call::onInstantMessageStatus(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnInstantMessageStatusParam **)&jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[27], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onInstantMessageStatus ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[16]) {
    pj::Call::onTypingIndication(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnTypingIndicationParam **)&jprm = (pj::OnTypingIndicationParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[28], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onTypingIndication ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

pjsip_redirect_op SwigDirector_Call::onCallRedirected(pj::OnCallRedirectedParam &prm) {
  pjsip_redirect_op c_result = SwigValueInit< pjsip_redirect_op >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[17]) {
    return pj::Call::onCallRedirected(prm);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallRedirectedParam **)&jprm = (pj::OnCallRedirectedParam *) &prm; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[29], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (pjsip_redirect_op)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallRedirected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Call::onCallMediaTransportState(pj::OnCallMediaTransportStateParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[18]) {
    pj::Call::onCallMediaTransportState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallMediaTransportStateParam **)&jprm = (pj::OnCallMediaTransportStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[30], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallMediaTransportState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCallMediaEvent(pj::OnCallMediaEventParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[19]) {
    pj::Call::onCallMediaEvent(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCallMediaEventParam **)&jprm = (pj::OnCallMediaEventParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[31], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCallMediaEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCreateMediaTransport(pj::OnCreateMediaTransportParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[20]) {
    pj::Call::onCreateMediaTransport(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCreateMediaTransportParam **)&jprm = (pj::OnCreateMediaTransportParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[32], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCreateMediaTransport ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::onCreateMediaTransportSrtp(pj::OnCreateMediaTransportSrtpParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[21]) {
    pj::Call::onCreateMediaTransportSrtp(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnCreateMediaTransportSrtpParam **)&jprm = (pj::OnCreateMediaTransportSrtpParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[33], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Call::onCreateMediaTransportSrtp ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Call::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onCallState", "(Lorg/pjsip/pjsua2/OnCallStateParam;)V", NULL 
    },
    {
      "onCallTsxState", "(Lorg/pjsip/pjsua2/OnCallTsxStateParam;)V", NULL 
    },
    {
      "onCallMediaState", "(Lorg/pjsip/pjsua2/OnCallMediaStateParam;)V", NULL 
    },
    {
      "onCallSdpCreated", "(Lorg/pjsip/pjsua2/OnCallSdpCreatedParam;)V", NULL 
    },
    {
      "onStreamCreated", "(Lorg/pjsip/pjsua2/OnStreamCreatedParam;)V", NULL 
    },
    {
      "onStreamDestroyed", "(Lorg/pjsip/pjsua2/OnStreamDestroyedParam;)V", NULL 
    },
    {
      "onDtmfDigit", "(Lorg/pjsip/pjsua2/OnDtmfDigitParam;)V", NULL 
    },
    {
      "onCallTransferRequest", "(Lorg/pjsip/pjsua2/OnCallTransferRequestParam;)V", NULL 
    },
    {
      "onCallTransferStatus", "(Lorg/pjsip/pjsua2/OnCallTransferStatusParam;)V", NULL 
    },
    {
      "onCallReplaceRequest", "(Lorg/pjsip/pjsua2/OnCallReplaceRequestParam;)V", NULL 
    },
    {
      "onCallReplaced", "(Lorg/pjsip/pjsua2/OnCallReplacedParam;)V", NULL 
    },
    {
      "onCallRxOffer", "(Lorg/pjsip/pjsua2/OnCallRxOfferParam;)V", NULL 
    },
    {
      "onCallRxReinvite", "(Lorg/pjsip/pjsua2/OnCallRxReinviteParam;)V", NULL 
    },
    {
      "onCallTxOffer", "(Lorg/pjsip/pjsua2/OnCallTxOfferParam;)V", NULL 
    },
    {
      "onInstantMessage", "(Lorg/pjsip/pjsua2/OnInstantMessageParam;)V", NULL 
    },
    {
      "onInstantMessageStatus", "(Lorg/pjsip/pjsua2/OnInstantMessageStatusParam;)V", NULL 
    },
    {
      "onTypingIndication", "(Lorg/pjsip/pjsua2/OnTypingIndicationParam;)V", NULL 
    },
    {
      "onCallRedirected", "(Lorg/pjsip/pjsua2/OnCallRedirectedParam;)I", NULL 
    },
    {
      "onCallMediaTransportState", "(Lorg/pjsip/pjsua2/OnCallMediaTransportStateParam;)V", NULL 
    },
    {
      "onCallMediaEvent", "(Lorg/pjsip/pjsua2/OnCallMediaEventParam;)V", NULL 
    },
    {
      "onCreateMediaTransport", "(Lorg/pjsip/pjsua2/OnCreateMediaTransportParam;)V", NULL 
    },
    {
      "onCreateMediaTransportSrtp", "(Lorg/pjsip/pjsua2/OnCreateMediaTransportSrtpParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/Call");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 22; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_LogWriter::SwigDirector_LogWriter(JNIEnv *jenv) : pj::LogWriter(), Swig::Director(jenv) {
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_LogWriter::write(pj::LogEntry const &entry) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jentry = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pj::LogWriter::write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::LogEntry **)&jentry = (pj::LogEntry *) &entry; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[34], swigjobj, jentry);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::LogWriter::write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_LogWriter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "write", "(Lorg/pjsip/pjsua2/LogEntry;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/LogWriter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Endpoint::SwigDirector_Endpoint(JNIEnv *jenv) : pj::Endpoint(), Swig::Director(jenv) {
}

SwigDirector_Endpoint::~SwigDirector_Endpoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Endpoint::onNatDetectionComplete(pj::OnNatDetectionCompleteParam const &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[0]) {
    pj::Endpoint::onNatDetectionComplete(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnNatDetectionCompleteParam **)&jprm = (pj::OnNatDetectionCompleteParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[35], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onNatDetectionComplete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onNatCheckStunServersComplete(pj::OnNatCheckStunServersCompleteParam const &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[1]) {
    pj::Endpoint::onNatCheckStunServersComplete(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnNatCheckStunServersCompleteParam **)&jprm = (pj::OnNatCheckStunServersCompleteParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[36], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onNatCheckStunServersComplete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onTransportState(pj::OnTransportStateParam const &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[2]) {
    pj::Endpoint::onTransportState(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnTransportStateParam **)&jprm = (pj::OnTransportStateParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[37], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onTransportState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onTimer(pj::OnTimerParam const &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[3]) {
    pj::Endpoint::onTimer(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnTimerParam **)&jprm = (pj::OnTimerParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[38], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onTimer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onSelectAccount(pj::OnSelectAccountParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[4]) {
    pj::Endpoint::onSelectAccount(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnSelectAccountParam **)&jprm = (pj::OnSelectAccountParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[39], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onSelectAccount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onIpChangeProgress(pj::OnIpChangeProgressParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[5]) {
    pj::Endpoint::onIpChangeProgress(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnIpChangeProgressParam **)&jprm = (pj::OnIpChangeProgressParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[40], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onIpChangeProgress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::onMediaEvent(pj::OnMediaEventParam &prm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jprm = 0 ;
  
  if (!swig_override[6]) {
    pj::Endpoint::onMediaEvent(prm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pj::OnMediaEventParam **)&jprm = (pj::OnMediaEventParam *) &prm; 
    jenv->CallStaticVoidMethod(Swig::jclass_pjsua2JNI, Swig::director_method_ids[41], swigjobj, jprm);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pj::Endpoint::onMediaEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Endpoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onNatDetectionComplete", "(Lorg/pjsip/pjsua2/OnNatDetectionCompleteParam;)V", NULL 
    },
    {
      "onNatCheckStunServersComplete", "(Lorg/pjsip/pjsua2/OnNatCheckStunServersCompleteParam;)V", NULL 
    },
    {
      "onTransportState", "(Lorg/pjsip/pjsua2/OnTransportStateParam;)V", NULL 
    },
    {
      "onTimer", "(Lorg/pjsip/pjsua2/OnTimerParam;)V", NULL 
    },
    {
      "onSelectAccount", "(Lorg/pjsip/pjsua2/OnSelectAccountParam;)V", NULL 
    },
    {
      "onIpChangeProgress", "(Lorg/pjsip/pjsua2/OnIpChangeProgressParam;)V", NULL 
    },
    {
      "onMediaEvent", "(Lorg/pjsip/pjsua2/OnMediaEventParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/pjsip/pjsua2/Endpoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  result = (pj_uint8_t) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1dscp_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->dscp_val = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1dscp_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  result = (pj_uint8_t) ((arg1)->dscp_val);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1so_1prio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->so_prio = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1so_1prio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  result = (pj_uint8_t) ((arg1)->so_prio);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1wmm_1prio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  arg2 = (pj_qos_wmm_prio)jarg2; 
  if (arg1) (arg1)->wmm_prio = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pj_1qos_1params_1wmm_1prio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj_qos_params **)&jarg1; 
  result = (pj_qos_wmm_prio) ((arg1)->wmm_prio);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1pj_1qos_1params(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj_qos_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj_qos_params *)new pj_qos_params();
  *(pj_qos_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1pj_1qos_1params(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj_qos_params **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1digit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->digit = arg2;
}


SWIGEXPORT jchar JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1digit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  result = (char) ((arg1)->digit);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1on_1msec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1on_1msec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1off_1msec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1off_1msec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  result = (short) ((arg1)->volume);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1pjmedia_1tone_1digit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pjmedia_tone_digit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pjmedia_tone_digit *)new pjmedia_tone_digit();
  *(pjmedia_tone_digit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1pjmedia_1tone_1digit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pjmedia_tone_digit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1map_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit_map **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1digit_1map_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_digit_map **)&jarg1; 
  result = (unsigned int) ((arg1)->count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1pjmedia_1tone_1digit_1map(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pjmedia_tone_digit_map *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pjmedia_tone_digit_map *)new pjmedia_tone_digit_map();
  *(pjmedia_tone_digit_map **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1pjmedia_1tone_1digit_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pjmedia_tone_digit_map **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1freq1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1freq1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->freq1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1freq2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1freq2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->freq2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1on_1msec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1on_1msec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1off_1msec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1off_1msec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->volume);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_pjmedia_1tone_1desc_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  result = (short) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1pjmedia_1tone_1desc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pjmedia_tone_desc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pjmedia_tone_desc *)new pjmedia_tone_desc();
  *(pjmedia_tone_desc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1pjmedia_1tone_1desc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pjmedia_tone_desc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1StringVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StringVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1IntVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  try {
    result = std_vector_Sl_int_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__doAdd__SWIG_1(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doSet(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IntVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = (pj::string *) & ((arg1)->title);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1srcFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->srcFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1srcFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = (pj::string *) & ((arg1)->srcFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1srcLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srcLine = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1srcLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = (int) ((arg1)->srcLine);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  bool arg2 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((pj::Error const *)arg1)->info(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Error_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Error **)&jarg1; 
  result = ((pj::Error const *)arg1)->info();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Error_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::Error *)new pj::Error();
  *(pj::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  pj_status_t arg1 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  int arg5 ;
  pj::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (pj_status_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  pj::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  result = (pj::Error *)new pj::Error(arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,(pj::string const &)*arg4,arg5);
  *(pj::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (int) ((arg1)->major);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (int) ((arg1)->minor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1rev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rev = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1rev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (int) ((arg1)->rev);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1suffix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->suffix = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1suffix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (pj::string *) & ((arg1)->suffix);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1full_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->full = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1full_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (pj::string *) & ((arg1)->full);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1numeric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->numeric = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Version_1numeric_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Version **)&jarg1; 
  result = (unsigned int) ((arg1)->numeric);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::Version *)new pj::Version();
  *(pj::Version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimeVal_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimeVal **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->sec = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimeVal_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimeVal **)&jarg1; 
  result = (long) ((arg1)->sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimeVal_1msec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimeVal **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->msec = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimeVal_1msec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimeVal **)&jarg1; 
  result = (long) ((arg1)->msec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TimeVal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TimeVal *)new pj::TimeVal();
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TimeVal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TimeVal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1PersistentObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::PersistentObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentObject_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::PersistentObject **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentObject_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::PersistentObject **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::PersistentObject const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1PersistentDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1loadFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1loadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1saveFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1saveString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = (arg1)->saveString();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1getRootContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  result = (pj::ContainerNode *) &((pj::PersistentDocument const *)arg1)->getRootContainer();
  *(pj::ContainerNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1hasUnread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  result = (bool)((pj::PersistentDocument const *)arg1)->hasUnread();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1unreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->unreadName();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readStringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StringVector **)&jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readStringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::StringVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StringVector **)&jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  arg2 = *(pj::PersistentObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PersistentObject & reference is null");
    return ;
  } 
  try {
    ((pj::PersistentDocument const *)arg1)->readObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1readArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeStringVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::StringVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  arg2 = *(pj::PersistentObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PersistentObject const & reference is null");
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeNewContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PersistentDocument_1writeNewArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PersistentDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1hasUnread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  result = (bool)((pj::ContainerNode const *)arg1)->hasUnread();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1unreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->unreadName();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readStringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StringVector **)&jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readStringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::StringVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StringVector **)&jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  arg2 = *(pj::PersistentObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PersistentObject & reference is null");
    return ;
  } 
  try {
    ((pj::ContainerNode const *)arg1)->readObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1readArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeStringVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::StringVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  arg2 = *(pj::PersistentObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PersistentObject const & reference is null");
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeNewContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ContainerNode_1writeNewArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ContainerNode **)&jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ContainerNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ContainerNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ContainerNode *)new pj::ContainerNode();
  *(pj::ContainerNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ContainerNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ContainerNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1scheme_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->scheme = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1scheme_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->scheme);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1realm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->realm = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1realm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->realm);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1dataType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1dataType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (int) ((arg1)->dataType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->data);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaK_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->akaK = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaK_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->akaK);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaOp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->akaOp = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaOp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->akaOp);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaAmf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->akaAmf = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1akaAmf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->akaAmf);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AuthCredInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AuthCredInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo();
  *(pj::AuthCredInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AuthCredInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  pj::string *arg1 = 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int arg4 ;
  pj::string arg5 ;
  pj::AuthCredInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  pj::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo((pj::string const &)*arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,arg4,arg5);
  *(pj::AuthCredInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AuthCredInfo const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AuthCredInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AuthCredInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1CaListFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CaListFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1CaListFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->CaListFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1certFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->certFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1certFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->certFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1privKeyFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->privKeyFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1privKeyFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->privKeyFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->password);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1CaBuf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CaBuf = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1CaBuf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->CaBuf);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1certBuf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->certBuf = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1certBuf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->certBuf);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1privKeyBuf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->privKeyBuf = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1privKeyBuf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->privKeyBuf);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = (pjsip_ssl_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pjsip_ssl_method) ((arg1)->method);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1proto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1proto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->proto);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1ciphers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = *(pj::IntVector **)&jarg2; 
  if (arg1) (arg1)->ciphers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1ciphers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj::IntVector *)& ((arg1)->ciphers);
  *(pj::IntVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1verifyServer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyServer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1verifyServer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (bool) ((arg1)->verifyServer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1verifyClient_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyClient = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1verifyClient_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (bool) ((arg1)->verifyClient);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1requireClientCert_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->requireClientCert = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1requireClientCert_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (bool) ((arg1)->requireClientCert);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1msecTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1msecTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->msecTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = *(pj_qos_params **)&jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  *(pj_qos_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosIgnoreError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->qosIgnoreError = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1qosIgnoreError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  result = (bool) ((arg1)->qosIgnoreError);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TlsConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TlsConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TlsConfig *)new pj::TlsConfig();
  *(pj::TlsConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::TlsConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TlsConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TlsConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->port);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1portRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->portRange = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1portRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->portRange);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1publicAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->publicAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1publicAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->publicAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1boundAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->boundAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1boundAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->boundAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1tlsConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *arg2 = (pj::TlsConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = *(pj::TlsConfig **)&jarg2; 
  if (arg1) (arg1)->tlsConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1tlsConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (pj::TlsConfig *)& ((arg1)->tlsConfig);
  *(pj::TlsConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1qosType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1qosType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1qosParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = *(pj_qos_params **)&jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1qosParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  *(pj_qos_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TransportConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TransportConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TransportConfig *)new pj::TransportConfig();
  *(pj::TransportConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::TransportConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TransportConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TransportConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pj::TransportId) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pjsip_transport_type_e) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1typeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1typeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1localAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1localAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1localName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1localName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1usageCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->usageCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportInfo_1usageCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->usageCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TransportInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TransportInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TransportInfo *)new pj::TransportInfo();
  *(pj::TransportInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TransportInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TransportInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1wholeMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1wholeMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1srcAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->srcAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1srcAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1pjRxData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjRxData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipRxData_1pjRxData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipRxData **)&jarg1; 
  result = (void *) ((arg1)->pjRxData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipRxData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipRxData *)new pj::SipRxData();
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipRxData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipRxData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1wholeMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1wholeMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1dstAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dstAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1dstAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->dstAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1pjTxData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjTxData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxData_1pjTxData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxData **)&jarg1; 
  result = (void *) ((arg1)->pjTxData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipTxData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipTxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipTxData *)new pj::SipTxData();
  *(pj::SipTxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipTxData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipTxData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1role_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1role_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (int) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1statusText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1statusText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1lastTx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  arg2 = *(pj::SipTxData **)&jarg2; 
  if (arg1) (arg1)->lastTx = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1lastTx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (pj::SipTxData *)& ((arg1)->lastTx);
  *(pj::SipTxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1pjTransaction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjTransaction = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTransaction_1pjTransaction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  result = (void *) ((arg1)->pjTransaction);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipTransaction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipTransaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipTransaction *)new pj::SipTransaction();
  *(pj::SipTransaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipTransaction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimerEvent_1entry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimerEvent **)&jarg1; 
  arg2 = *(pj::TimerEntry *)&jarg2; 
  if (arg1) (arg1)->entry = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TimerEvent_1entry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TimerEvent **)&jarg1; 
  result = (pj::TimerEntry) ((arg1)->entry);
  *(pj::TimerEntry *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TimerEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TimerEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TimerEvent *)new pj::TimerEvent();
  *(pj::TimerEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TimerEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TimerEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1tdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  arg2 = *(pj::SipTxData **)&jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1tdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  *(pj::SipTxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1timer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  arg2 = *(pj::TimerEntry *)&jarg2; 
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1timer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  result = (pj::TimerEntry) ((arg1)->timer);
  *(pj::TimerEntry *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEventSrc_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  result = (pj::GenericData) ((arg1)->data);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TsxStateEventSrc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TsxStateEventSrc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TsxStateEventSrc *)new pj::TsxStateEventSrc();
  *(pj::TsxStateEventSrc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TsxStateEventSrc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TsxStateEventSrc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *arg2 = (pj::TsxStateEventSrc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  arg2 = *(pj::TsxStateEventSrc **)&jarg2; 
  if (arg1) (arg1)->src = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  result = (pj::TsxStateEventSrc *)& ((arg1)->src);
  *(pj::TsxStateEventSrc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1tsx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  arg2 = *(pj::SipTransaction **)&jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1tsx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  *(pj::SipTransaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1prevState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->prevState = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1prevState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->prevState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TsxStateEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TsxStateEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TsxStateEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TsxStateEvent *)new pj::TsxStateEvent();
  *(pj::TsxStateEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TsxStateEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TsxStateEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxMsgEvent_1tdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TxMsgEvent **)&jarg1; 
  arg2 = *(pj::SipTxData **)&jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxMsgEvent_1tdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TxMsgEvent **)&jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  *(pj::SipTxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TxMsgEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TxMsgEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TxMsgEvent *)new pj::TxMsgEvent();
  *(pj::TxMsgEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TxMsgEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TxMsgEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxErrorEvent_1tdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TxErrorEvent **)&jarg1; 
  arg2 = *(pj::SipTxData **)&jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxErrorEvent_1tdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TxErrorEvent **)&jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  *(pj::SipTxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxErrorEvent_1tsx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TxErrorEvent **)&jarg1; 
  arg2 = *(pj::SipTransaction **)&jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TxErrorEvent_1tsx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TxErrorEvent **)&jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  *(pj::SipTransaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TxErrorEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TxErrorEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TxErrorEvent *)new pj::TxErrorEvent();
  *(pj::TxErrorEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TxErrorEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TxErrorEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RxMsgEvent_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RxMsgEvent **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RxMsgEvent_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RxMsgEvent **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RxMsgEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RxMsgEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RxMsgEvent *)new pj::RxMsgEvent();
  *(pj::RxMsgEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RxMsgEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RxMsgEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->user1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  result = (pj::GenericData) ((arg1)->user1);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->user2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  result = (pj::GenericData) ((arg1)->user2);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->user3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  result = (pj::GenericData) ((arg1)->user3);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->user4 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UserEvent_1user4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UserEvent **)&jarg1; 
  result = (pj::GenericData) ((arg1)->user4);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1UserEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::UserEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::UserEvent *)new pj::UserEvent();
  *(pj::UserEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1UserEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::UserEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1timer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *arg2 = (pj::TimerEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::TimerEvent **)&jarg2; 
  if (arg1) (arg1)->timer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1timer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::TimerEvent *)& ((arg1)->timer);
  *(pj::TimerEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1tsxState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *arg2 = (pj::TsxStateEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::TsxStateEvent **)&jarg2; 
  if (arg1) (arg1)->tsxState = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1tsxState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::TsxStateEvent *)& ((arg1)->tsxState);
  *(pj::TsxStateEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1txMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *arg2 = (pj::TxMsgEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::TxMsgEvent **)&jarg2; 
  if (arg1) (arg1)->txMsg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1txMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::TxMsgEvent *)& ((arg1)->txMsg);
  *(pj::TxMsgEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1txError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *arg2 = (pj::TxErrorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::TxErrorEvent **)&jarg2; 
  if (arg1) (arg1)->txError = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1txError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::TxErrorEvent *)& ((arg1)->txError);
  *(pj::TxErrorEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1rxMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *arg2 = (pj::RxMsgEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::RxMsgEvent **)&jarg2; 
  if (arg1) (arg1)->rxMsg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1rxMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::RxMsgEvent *)& ((arg1)->rxMsg);
  *(pj::RxMsgEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *arg2 = (pj::UserEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  arg2 = *(pj::UserEvent **)&jarg2; 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEventBody_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  result = (pj::UserEvent *)& ((arg1)->user);
  *(pj::UserEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipEventBody(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipEventBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipEventBody *)new pj::SipEventBody();
  *(pj::SipEventBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipEventBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipEventBody **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1body_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *arg2 = (pj::SipEventBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  arg2 = *(pj::SipEventBody **)&jarg2; 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1body_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  result = (pj::SipEventBody *)& ((arg1)->body);
  *(pj::SipEventBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1pjEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjEvent = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipEvent_1pjEvent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipEvent **)&jarg1; 
  result = (void *) ((arg1)->pjEvent);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipEvent *)new pj::SipEvent();
  *(pj::SipEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMediaType_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMediaType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMediaType_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMediaType **)&jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMediaType_1subType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMediaType **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->subType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMediaType_1subType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMediaType **)&jarg1; 
  result = (pj::string *) & ((arg1)->subType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipMediaType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipMediaType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipMediaType *)new pj::SipMediaType();
  *(pj::SipMediaType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipMediaType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipMediaType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeader_1hName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipHeader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->hName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeader_1hName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipHeader **)&jarg1; 
  result = (pj::string *) & ((arg1)->hName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeader_1hValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipHeader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->hValue = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeader_1hValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipHeader **)&jarg1; 
  result = (pj::string *) & ((arg1)->hValue);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipHeader *)new pj::SipHeader();
  *(pj::SipHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  arg2 = *(pj::SipHeaderVector **)&jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  *(pj::SipHeaderVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1contentType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  arg2 = *(pj::SipMediaType **)&jarg2; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1contentType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->contentType);
  *(pj::SipMediaType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1body_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPart_1body_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  result = (pj::string *) & ((arg1)->body);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipMultipartPart(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipMultipartPart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipMultipartPart *)new pj::SipMultipartPart();
  *(pj::SipMultipartPart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipMultipartPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipMultipartPart **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1targetUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1targetUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  arg2 = *(pj::SipHeaderVector **)&jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  *(pj::SipHeaderVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1contentType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1contentType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1msgBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1msgBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1multipartContentType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  arg2 = *(pj::SipMediaType **)&jarg2; 
  if (arg1) (arg1)->multipartContentType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1multipartContentType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->multipartContentType);
  *(pj::SipMediaType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1multipartParts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *arg2 = (pj::SipMultipartPartVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  arg2 = *(pj::SipMultipartPartVector **)&jarg2; 
  if (arg1) (arg1)->multipartParts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1multipartParts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (pj::SipMultipartPartVector *)& ((arg1)->multipartParts);
  *(pj::SipMultipartPartVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipTxOption_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  result = (bool)((pj::SipTxOption const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipTxOption(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SipTxOption *)new pj::SipTxOption();
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipTxOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SipTxOption **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1contentType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1contentType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->content);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendInstantMessageParam_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  result = (pj::Token) ((arg1)->userData);
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SendInstantMessageParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SendInstantMessageParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SendInstantMessageParam *)new pj::SendInstantMessageParam();
  *(pj::SendInstantMessageParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SendInstantMessageParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SendInstantMessageParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendTypingIndicationParam_1isTyping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendTypingIndicationParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendTypingIndicationParam_1isTyping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendTypingIndicationParam **)&jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendTypingIndicationParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SendTypingIndicationParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SendTypingIndicationParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SendTypingIndicationParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SendTypingIndicationParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SendTypingIndicationParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SendTypingIndicationParam *)new pj::SendTypingIndicationParam();
  *(pj::SendTypingIndicationParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SendTypingIndicationParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SendTypingIndicationParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipHeaderVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >();
  *(std::vector< pj::SipHeader > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipHeaderVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipHeader > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >((std::vector< pj::SipHeader > const &)*arg1);
  *(std::vector< pj::SipHeader > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  result = ((std::vector< pj::SipHeader > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = (std::vector< pj::SipHeader >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  result = (bool)((std::vector< pj::SipHeader > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipHeaderVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::SipHeader *arg2 = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::SipHeader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SipHeader const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::SipHeader > *)new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(arg1,(pj::SipHeader const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipHeader > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_SipHeader_Sg__doSize((std::vector< pj::SipHeader > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = *(std::vector< pj::SipHeader >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipHeader >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_SipHeader_Sg__doAdd__SWIG_0(arg1,(pj::SipHeader const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipHeader >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SipHeader >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipHeader >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__doAdd__SWIG_1(arg1,arg2,(pj::SipHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipHeader >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_SipHeader_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipHeader >::value_type **)&jresult = new std::vector< pj::SipHeader >::value_type((const std::vector< pj::SipHeader >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipHeader >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::SipHeader >::value_type *) &std_vector_Sl_pj_SipHeader_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipHeader >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipHeader >::value_type *arg3 = 0 ;
  std::vector< pj::SipHeader >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SipHeader >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipHeader >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_SipHeader_Sg__doSet(arg1,arg2,(pj::SipHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipHeader >::value_type **)&jresult = new std::vector< pj::SipHeader >::value_type((const std::vector< pj::SipHeader >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipHeaderVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipHeaderVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::SipHeader > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AuthCredInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >();
  *(std::vector< pj::AuthCredInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AuthCredInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AuthCredInfo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >((std::vector< pj::AuthCredInfo > const &)*arg1);
  *(std::vector< pj::AuthCredInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = (std::vector< pj::AuthCredInfo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  result = (bool)((std::vector< pj::AuthCredInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AuthCredInfoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::AuthCredInfo *arg2 = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::AuthCredInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AuthCredInfo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::AuthCredInfo > *)new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(arg1,(pj::AuthCredInfo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AuthCredInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg__doSize((std::vector< pj::AuthCredInfo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = *(std::vector< pj::AuthCredInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AuthCredInfo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_AuthCredInfo_Sg__doAdd__SWIG_0(arg1,(pj::AuthCredInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AuthCredInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AuthCredInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AuthCredInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AuthCredInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AuthCredInfo >::value_type **)&jresult = new std::vector< pj::AuthCredInfo >::value_type((const std::vector< pj::AuthCredInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AuthCredInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AuthCredInfo >::value_type *) &std_vector_Sl_pj_AuthCredInfo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AuthCredInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AuthCredInfo >::value_type *arg3 = 0 ;
  std::vector< pj::AuthCredInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AuthCredInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AuthCredInfo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg__doSet(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AuthCredInfo >::value_type **)&jresult = new std::vector< pj::AuthCredInfo >::value_type((const std::vector< pj::AuthCredInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AuthCredInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::AuthCredInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SrtpCryptoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >();
  *(std::vector< pj::SrtpCrypto > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SrtpCryptoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = 0 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SrtpCrypto > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >((std::vector< pj::SrtpCrypto > const &)*arg1);
  *(std::vector< pj::SrtpCrypto > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  result = ((std::vector< pj::SrtpCrypto > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = (std::vector< pj::SrtpCrypto >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  result = (bool)((std::vector< pj::SrtpCrypto > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SrtpCryptoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::SrtpCrypto *arg2 = 0 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::SrtpCrypto **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SrtpCrypto const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::SrtpCrypto > *)new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(arg1,(pj::SrtpCrypto const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SrtpCrypto > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_SrtpCrypto_Sg__doSize((std::vector< pj::SrtpCrypto > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = *(std::vector< pj::SrtpCrypto >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SrtpCrypto >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_SrtpCrypto_Sg__doAdd__SWIG_0(arg1,(pj::SrtpCrypto const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint arg2 ;
  std::vector< pj::SrtpCrypto >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SrtpCrypto >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SrtpCrypto >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__doAdd__SWIG_1(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint arg2 ;
  std::vector< pj::SrtpCrypto >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_SrtpCrypto_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SrtpCrypto >::value_type **)&jresult = new std::vector< pj::SrtpCrypto >::value_type((const std::vector< pj::SrtpCrypto >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint arg2 ;
  std::vector< pj::SrtpCrypto >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::SrtpCrypto >::value_type *) &std_vector_Sl_pj_SrtpCrypto_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SrtpCrypto >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint arg2 ;
  std::vector< pj::SrtpCrypto >::value_type *arg3 = 0 ;
  std::vector< pj::SrtpCrypto >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SrtpCrypto >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SrtpCrypto >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_SrtpCrypto_Sg__doSet(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SrtpCrypto >::value_type **)&jresult = new std::vector< pj::SrtpCrypto >::value_type((const std::vector< pj::SrtpCrypto >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCryptoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SrtpCryptoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::SrtpCrypto > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipMultipartPartVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >();
  *(std::vector< pj::SipMultipartPart > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipMultipartPartVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipMultipartPart > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >((std::vector< pj::SipMultipartPart > const &)*arg1);
  *(std::vector< pj::SipMultipartPart > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = (std::vector< pj::SipMultipartPart >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  result = (bool)((std::vector< pj::SipMultipartPart > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SipMultipartPartVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::SipMultipartPart *arg2 = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::SipMultipartPart **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SipMultipartPart const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::SipMultipartPart > *)new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(arg1,(pj::SipMultipartPart const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipMultipartPart > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg__doSize((std::vector< pj::SipMultipartPart > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = *(std::vector< pj::SipMultipartPart >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipMultipartPart >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_SipMultipartPart_Sg__doAdd__SWIG_0(arg1,(pj::SipMultipartPart const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipMultipartPart >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SipMultipartPart >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipMultipartPart >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__doAdd__SWIG_1(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipMultipartPart >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipMultipartPart >::value_type **)&jresult = new std::vector< pj::SipMultipartPart >::value_type((const std::vector< pj::SipMultipartPart >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipMultipartPart >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::SipMultipartPart >::value_type *) &std_vector_Sl_pj_SipMultipartPart_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipMultipartPart >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint arg2 ;
  std::vector< pj::SipMultipartPart >::value_type *arg3 = 0 ;
  std::vector< pj::SipMultipartPart >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SipMultipartPart >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SipMultipartPart >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg__doSet(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SipMultipartPart >::value_type **)&jresult = new std::vector< pj::SipMultipartPart >::value_type((const std::vector< pj::SipMultipartPart >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SipMultipartPartVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SipMultipartPartVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::SipMultipartPart > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >();
  *(std::vector< pj::Buddy * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::Buddy * > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >((std::vector< pj::Buddy * > const &)*arg1);
  *(std::vector< pj::Buddy * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  result = ((std::vector< pj::Buddy * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = (std::vector< pj::Buddy * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  result = (bool)((std::vector< pj::Buddy * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(pj::Buddy **)&jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  try {
    result = (std::vector< pj::Buddy * > *)new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(arg1,(pj::Buddy *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_Buddy_Sm__Sg__doSize((std::vector< pj::Buddy * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::value_type *arg2 = 0 ;
  std::vector< pj::Buddy * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  temp2 = *(std::vector< pj::Buddy * >::value_type *)&jarg2;
  arg2 = (std::vector< pj::Buddy * >::value_type *)&temp2; 
  std_vector_Sl_pj_Buddy_Sm__Sg__doAdd__SWIG_0(arg1,(pj::Buddy *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy * >::value_type *arg3 = 0 ;
  std::vector< pj::Buddy * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::Buddy * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::Buddy * >::value_type *)&temp3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(pj::Buddy *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::Buddy * >::value_type)std_vector_Sl_pj_Buddy_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::Buddy * >::value_type *) &std_vector_Sl_pj_Buddy_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy * >::value_type *arg3 = 0 ;
  std::vector< pj::Buddy * >::value_type temp3 = 0 ;
  std::vector< pj::Buddy * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::Buddy * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::Buddy * >::value_type *)&temp3; 
  try {
    result = (std::vector< pj::Buddy * >::value_type)std_vector_Sl_pj_Buddy_Sm__Sg__doSet(arg1,arg2,(pj::Buddy *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1BuddyVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::Buddy * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::Buddy > *)new std::vector< pj::Buddy >();
  *(std::vector< pj::Buddy > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = 0 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::Buddy > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::Buddy > *)new std::vector< pj::Buddy >((std::vector< pj::Buddy > const &)*arg1);
  *(std::vector< pj::Buddy > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  result = ((std::vector< pj::Buddy > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = (std::vector< pj::Buddy >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  result = (bool)((std::vector< pj::Buddy > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyVector2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::Buddy *arg2 = 0 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::Buddy **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Buddy const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::Buddy > *)new_std_vector_Sl_pj_Buddy_Sg___SWIG_2(arg1,(pj::Buddy const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_Buddy_Sg__doSize((std::vector< pj::Buddy > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = *(std::vector< pj::Buddy >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::Buddy >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_Buddy_Sg__doAdd__SWIG_0(arg1,(pj::Buddy const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::Buddy >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::Buddy >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sg__doAdd__SWIG_1(arg1,arg2,(pj::Buddy const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_Buddy_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy >::value_type **)&jresult = new std::vector< pj::Buddy >::value_type((const std::vector< pj::Buddy >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::Buddy >::value_type *) &std_vector_Sl_pj_Buddy_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint arg2 ;
  std::vector< pj::Buddy >::value_type *arg3 = 0 ;
  std::vector< pj::Buddy >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::Buddy >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::Buddy >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_Buddy_Sg__doSet(arg1,arg2,(pj::Buddy const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::Buddy >::value_type **)&jresult = new std::vector< pj::Buddy >::value_type((const std::vector< pj::Buddy >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyVector2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1BuddyVector2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::Buddy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >();
  *(std::vector< pj::AudioMedia * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioMedia * > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >((std::vector< pj::AudioMedia * > const &)*arg1);
  *(std::vector< pj::AudioMedia * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  result = ((std::vector< pj::AudioMedia * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = (std::vector< pj::AudioMedia * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  result = (bool)((std::vector< pj::AudioMedia * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(pj::AudioMedia **)&jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  try {
    result = (std::vector< pj::AudioMedia * > *)new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(arg1,(pj::AudioMedia *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_AudioMedia_Sm__Sg__doSize((std::vector< pj::AudioMedia * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::value_type *arg2 = 0 ;
  std::vector< pj::AudioMedia * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  temp2 = *(std::vector< pj::AudioMedia * >::value_type *)&jarg2;
  arg2 = (std::vector< pj::AudioMedia * >::value_type *)&temp2; 
  std_vector_Sl_pj_AudioMedia_Sm__Sg__doAdd__SWIG_0(arg1,(pj::AudioMedia *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia * >::value_type *arg3 = 0 ;
  std::vector< pj::AudioMedia * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::AudioMedia * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::AudioMedia * >::value_type *)&temp3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioMedia * >::value_type)std_vector_Sl_pj_AudioMedia_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioMedia * >::value_type *) &std_vector_Sl_pj_AudioMedia_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia * >::value_type *arg3 = 0 ;
  std::vector< pj::AudioMedia * >::value_type temp3 = 0 ;
  std::vector< pj::AudioMedia * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::AudioMedia * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::AudioMedia * >::value_type *)&temp3; 
  try {
    result = (std::vector< pj::AudioMedia * >::value_type)std_vector_Sl_pj_AudioMedia_Sm__Sg__doSet(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::AudioMedia * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::AudioMedia > *)new std::vector< pj::AudioMedia >();
  *(std::vector< pj::AudioMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = 0 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioMedia > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::AudioMedia > *)new std::vector< pj::AudioMedia >((std::vector< pj::AudioMedia > const &)*arg1);
  *(std::vector< pj::AudioMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  result = ((std::vector< pj::AudioMedia > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = (std::vector< pj::AudioMedia >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  result = (bool)((std::vector< pj::AudioMedia > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaVector2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::AudioMedia *arg2 = 0 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::AudioMedia > *)new_std_vector_Sl_pj_AudioMedia_Sg___SWIG_2(arg1,(pj::AudioMedia const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_AudioMedia_Sg__doSize((std::vector< pj::AudioMedia > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = *(std::vector< pj::AudioMedia >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioMedia >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_AudioMedia_Sg__doAdd__SWIG_0(arg1,(pj::AudioMedia const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AudioMedia >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioMedia >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__doAdd__SWIG_1(arg1,arg2,(pj::AudioMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_AudioMedia_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia >::value_type **)&jresult = new std::vector< pj::AudioMedia >::value_type((const std::vector< pj::AudioMedia >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioMedia >::value_type *) &std_vector_Sl_pj_AudioMedia_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioMedia >::value_type *arg3 = 0 ;
  std::vector< pj::AudioMedia >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AudioMedia >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioMedia >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_AudioMedia_Sg__doSet(arg1,arg2,(pj::AudioMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioMedia >::value_type **)&jresult = new std::vector< pj::AudioMedia >::value_type((const std::vector< pj::AudioMedia >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaVector2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaVector2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::AudioMedia > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoMediaVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::VideoMedia > *)new std::vector< pj::VideoMedia >();
  *(std::vector< pj::VideoMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoMediaVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = 0 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoMedia > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::VideoMedia > *)new std::vector< pj::VideoMedia >((std::vector< pj::VideoMedia > const &)*arg1);
  *(std::vector< pj::VideoMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  result = ((std::vector< pj::VideoMedia > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = (std::vector< pj::VideoMedia >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  result = (bool)((std::vector< pj::VideoMedia > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoMediaVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::VideoMedia *arg2 = 0 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::VideoMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoMedia const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::VideoMedia > *)new_std_vector_Sl_pj_VideoMedia_Sg___SWIG_2(arg1,(pj::VideoMedia const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoMedia > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_VideoMedia_Sg__doSize((std::vector< pj::VideoMedia > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = *(std::vector< pj::VideoMedia >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoMedia >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_VideoMedia_Sg__doAdd__SWIG_0(arg1,(pj::VideoMedia const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoMedia >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::VideoMedia >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoMedia >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__doAdd__SWIG_1(arg1,arg2,(pj::VideoMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoMedia >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_VideoMedia_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoMedia >::value_type **)&jresult = new std::vector< pj::VideoMedia >::value_type((const std::vector< pj::VideoMedia >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoMedia >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::VideoMedia >::value_type *) &std_vector_Sl_pj_VideoMedia_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoMedia >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoMedia >::value_type *arg3 = 0 ;
  std::vector< pj::VideoMedia >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::VideoMedia >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoMedia >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_VideoMedia_Sg__doSet(arg1,arg2,(pj::VideoMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoMedia >::value_type **)&jresult = new std::vector< pj::VideoMedia >::value_type((const std::vector< pj::VideoMedia >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMediaVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoMediaVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::VideoMedia > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDescVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >();
  *(std::vector< pj::ToneDesc > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDescVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDesc > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >((std::vector< pj::ToneDesc > const &)*arg1);
  *(std::vector< pj::ToneDesc > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  result = ((std::vector< pj::ToneDesc > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = (std::vector< pj::ToneDesc >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  result = (bool)((std::vector< pj::ToneDesc > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDescVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::ToneDesc *arg2 = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::ToneDesc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDesc const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::ToneDesc > *)new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(arg1,(pj::ToneDesc const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDesc > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg__doSize((std::vector< pj::ToneDesc > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = *(std::vector< pj::ToneDesc >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDesc >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_ToneDesc_Sg__doAdd__SWIG_0(arg1,(pj::ToneDesc const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDesc >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDesc >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDesc >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__doAdd__SWIG_1(arg1,arg2,(pj::ToneDesc const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDesc >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDesc >::value_type **)&jresult = new std::vector< pj::ToneDesc >::value_type((const std::vector< pj::ToneDesc >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDesc >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::ToneDesc >::value_type *) &std_vector_Sl_pj_ToneDesc_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDesc >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDesc >::value_type *arg3 = 0 ;
  std::vector< pj::ToneDesc >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDesc >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDesc >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg__doSet(arg1,arg2,(pj::ToneDesc const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDesc >::value_type **)&jresult = new std::vector< pj::ToneDesc >::value_type((const std::vector< pj::ToneDesc >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDescVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDescVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::ToneDesc > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >();
  *(std::vector< pj::ToneDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigit > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >((std::vector< pj::ToneDigit > const &)*arg1);
  *(std::vector< pj::ToneDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  result = ((std::vector< pj::ToneDigit > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = (std::vector< pj::ToneDigit >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  result = (bool)((std::vector< pj::ToneDigit > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::ToneDigit *arg2 = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::ToneDigit **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDigit const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::ToneDigit > *)new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(arg1,(pj::ToneDigit const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg__doSize((std::vector< pj::ToneDigit > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = *(std::vector< pj::ToneDigit >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigit >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_ToneDigit_Sg__doAdd__SWIG_0(arg1,(pj::ToneDigit const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigit >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDigit >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigit >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__doAdd__SWIG_1(arg1,arg2,(pj::ToneDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigit >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigit >::value_type **)&jresult = new std::vector< pj::ToneDigit >::value_type((const std::vector< pj::ToneDigit >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::ToneDigit >::value_type *) &std_vector_Sl_pj_ToneDigit_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigit >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigit >::value_type *arg3 = 0 ;
  std::vector< pj::ToneDigit >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDigit >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigit >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg__doSet(arg1,arg2,(pj::ToneDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigit >::value_type **)&jresult = new std::vector< pj::ToneDigit >::value_type((const std::vector< pj::ToneDigit >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDigitVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::ToneDigit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitMapVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >();
  *(std::vector< pj::ToneDigitMapDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitMapVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigitMapDigit > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >((std::vector< pj::ToneDigitMapDigit > const &)*arg1);
  *(std::vector< pj::ToneDigitMapDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = (std::vector< pj::ToneDigitMapDigit >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  result = (bool)((std::vector< pj::ToneDigitMapDigit > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitMapVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::ToneDigitMapDigit *arg2 = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::ToneDigitMapDigit **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDigitMapDigit const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(arg1,(pj::ToneDigitMapDigit const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigitMapDigit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg__doSize((std::vector< pj::ToneDigitMapDigit > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigitMapDigit >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_ToneDigitMapDigit_Sg__doAdd__SWIG_0(arg1,(pj::ToneDigitMapDigit const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigitMapDigit >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigitMapDigit >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__doAdd__SWIG_1(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigitMapDigit >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jresult = new std::vector< pj::ToneDigitMapDigit >::value_type((const std::vector< pj::ToneDigitMapDigit >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigitMapDigit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit >::value_type *) &std_vector_Sl_pj_ToneDigitMapDigit_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint arg2 ;
  std::vector< pj::ToneDigitMapDigit >::value_type *arg3 = 0 ;
  std::vector< pj::ToneDigitMapDigit >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::ToneDigitMapDigit >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg__doSet(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::ToneDigitMapDigit >::value_type **)&jresult = new std::vector< pj::ToneDigitMapDigit >::value_type((const std::vector< pj::ToneDigitMapDigit >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDigitMapVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::ToneDigitMapDigit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >();
  *(std::vector< pj::AudioDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioDevInfo * > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >((std::vector< pj::AudioDevInfo * > const &)*arg1);
  *(std::vector< pj::AudioDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  result = ((std::vector< pj::AudioDevInfo * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  result = (bool)((std::vector< pj::AudioDevInfo * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(pj::AudioDevInfo **)&jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(arg1,(pj::AudioDevInfo *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doSize((std::vector< pj::AudioDevInfo * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::value_type *arg2 = 0 ;
  std::vector< pj::AudioDevInfo * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  temp2 = *(std::vector< pj::AudioDevInfo * >::value_type *)&jarg2;
  arg2 = (std::vector< pj::AudioDevInfo * >::value_type *)&temp2; 
  std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doAdd__SWIG_0(arg1,(pj::AudioDevInfo *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::AudioDevInfo * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::AudioDevInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::AudioDevInfo * >::value_type *)&temp3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo * >::value_type)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo * >::value_type *) &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::AudioDevInfo * >::value_type temp3 = 0 ;
  std::vector< pj::AudioDevInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::AudioDevInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::AudioDevInfo * >::value_type *)&temp3; 
  try {
    result = (std::vector< pj::AudioDevInfo * >::value_type)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doSet(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioDevInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::AudioDevInfo * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::AudioDevInfo > *)new std::vector< pj::AudioDevInfo >();
  *(std::vector< pj::AudioDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioDevInfo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::AudioDevInfo > *)new std::vector< pj::AudioDevInfo >((std::vector< pj::AudioDevInfo > const &)*arg1);
  *(std::vector< pj::AudioDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  result = ((std::vector< pj::AudioDevInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  result = (bool)((std::vector< pj::AudioDevInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfoVector2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::AudioDevInfo *arg2 = 0 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::AudioDevInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioDevInfo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::AudioDevInfo > *)new_std_vector_Sl_pj_AudioDevInfo_Sg___SWIG_2(arg1,(pj::AudioDevInfo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_AudioDevInfo_Sg__doSize((std::vector< pj::AudioDevInfo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = *(std::vector< pj::AudioDevInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioDevInfo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_AudioDevInfo_Sg__doAdd__SWIG_0(arg1,(pj::AudioDevInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AudioDevInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioDevInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::AudioDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_AudioDevInfo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo >::value_type **)&jresult = new std::vector< pj::AudioDevInfo >::value_type((const std::vector< pj::AudioDevInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo >::value_type *) &std_vector_Sl_pj_AudioDevInfo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::AudioDevInfo >::value_type *arg3 = 0 ;
  std::vector< pj::AudioDevInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::AudioDevInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::AudioDevInfo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_AudioDevInfo_Sg__doSet(arg1,arg2,(pj::AudioDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::AudioDevInfo >::value_type **)&jresult = new std::vector< pj::AudioDevInfo >::value_type((const std::vector< pj::AudioDevInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfoVector2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioDevInfoVector2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::AudioDevInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >();
  *(std::vector< pj::CodecInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecInfo * > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >((std::vector< pj::CodecInfo * > const &)*arg1);
  *(std::vector< pj::CodecInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  result = ((std::vector< pj::CodecInfo * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = (std::vector< pj::CodecInfo * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  result = (bool)((std::vector< pj::CodecInfo * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(pj::CodecInfo **)&jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  try {
    result = (std::vector< pj::CodecInfo * > *)new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(arg1,(pj::CodecInfo *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_CodecInfo_Sm__Sg__doSize((std::vector< pj::CodecInfo * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::value_type *arg2 = 0 ;
  std::vector< pj::CodecInfo * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  temp2 = *(std::vector< pj::CodecInfo * >::value_type *)&jarg2;
  arg2 = (std::vector< pj::CodecInfo * >::value_type *)&temp2; 
  std_vector_Sl_pj_CodecInfo_Sm__Sg__doAdd__SWIG_0(arg1,(pj::CodecInfo *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::CodecInfo * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::CodecInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::CodecInfo * >::value_type *)&temp3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::CodecInfo * >::value_type)std_vector_Sl_pj_CodecInfo_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::CodecInfo * >::value_type *) &std_vector_Sl_pj_CodecInfo_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::CodecInfo * >::value_type temp3 = 0 ;
  std::vector< pj::CodecInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::CodecInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::CodecInfo * >::value_type *)&temp3; 
  try {
    result = (std::vector< pj::CodecInfo * >::value_type)std_vector_Sl_pj_CodecInfo_Sm__Sg__doSet(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::CodecInfo * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::CodecInfo > *)new std::vector< pj::CodecInfo >();
  *(std::vector< pj::CodecInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = 0 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecInfo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::CodecInfo > *)new std::vector< pj::CodecInfo >((std::vector< pj::CodecInfo > const &)*arg1);
  *(std::vector< pj::CodecInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  result = ((std::vector< pj::CodecInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = (std::vector< pj::CodecInfo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  result = (bool)((std::vector< pj::CodecInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfoVector2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::CodecInfo *arg2 = 0 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::CodecInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CodecInfo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::CodecInfo > *)new_std_vector_Sl_pj_CodecInfo_Sg___SWIG_2(arg1,(pj::CodecInfo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_CodecInfo_Sg__doSize((std::vector< pj::CodecInfo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = *(std::vector< pj::CodecInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecInfo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_CodecInfo_Sg__doAdd__SWIG_0(arg1,(pj::CodecInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CodecInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::CodecInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_CodecInfo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo >::value_type **)&jresult = new std::vector< pj::CodecInfo >::value_type((const std::vector< pj::CodecInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::CodecInfo >::value_type *) &std_vector_Sl_pj_CodecInfo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecInfo >::value_type *arg3 = 0 ;
  std::vector< pj::CodecInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CodecInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecInfo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_CodecInfo_Sg__doSet(arg1,arg2,(pj::CodecInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecInfo >::value_type **)&jresult = new std::vector< pj::CodecInfo >::value_type((const std::vector< pj::CodecInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfoVector2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecInfoVector2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::CodecInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >();
  *(std::vector< pj::VideoDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoDevInfo * > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >((std::vector< pj::VideoDevInfo * > const &)*arg1);
  *(std::vector< pj::VideoDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  result = ((std::vector< pj::VideoDevInfo * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  result = (bool)((std::vector< pj::VideoDevInfo * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(pj::VideoDevInfo **)&jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(arg1,(pj::VideoDevInfo *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doSize((std::vector< pj::VideoDevInfo * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::value_type *arg2 = 0 ;
  std::vector< pj::VideoDevInfo * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  temp2 = *(std::vector< pj::VideoDevInfo * >::value_type *)&jarg2;
  arg2 = (std::vector< pj::VideoDevInfo * >::value_type *)&temp2; 
  std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doAdd__SWIG_0(arg1,(pj::VideoDevInfo *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::VideoDevInfo * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::VideoDevInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::VideoDevInfo * >::value_type *)&temp3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo * >::value_type)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo * >::value_type *) &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo * >::value_type *arg3 = 0 ;
  std::vector< pj::VideoDevInfo * >::value_type temp3 = 0 ;
  std::vector< pj::VideoDevInfo * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< pj::VideoDevInfo * >::value_type *)&jarg3;
  arg3 = (std::vector< pj::VideoDevInfo * >::value_type *)&temp3; 
  try {
    result = (std::vector< pj::VideoDevInfo * >::value_type)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doSet(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoDevInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::VideoDevInfo * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::VideoDevInfo > *)new std::vector< pj::VideoDevInfo >();
  *(std::vector< pj::VideoDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = 0 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoDevInfo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::VideoDevInfo > *)new std::vector< pj::VideoDevInfo >((std::vector< pj::VideoDevInfo > const &)*arg1);
  *(std::vector< pj::VideoDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  result = ((std::vector< pj::VideoDevInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  result = (bool)((std::vector< pj::VideoDevInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfoVector2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::VideoDevInfo *arg2 = 0 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::VideoDevInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoDevInfo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::VideoDevInfo > *)new_std_vector_Sl_pj_VideoDevInfo_Sg___SWIG_2(arg1,(pj::VideoDevInfo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_VideoDevInfo_Sg__doSize((std::vector< pj::VideoDevInfo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = *(std::vector< pj::VideoDevInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoDevInfo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_VideoDevInfo_Sg__doAdd__SWIG_0(arg1,(pj::VideoDevInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::VideoDevInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoDevInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::VideoDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_VideoDevInfo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo >::value_type **)&jresult = new std::vector< pj::VideoDevInfo >::value_type((const std::vector< pj::VideoDevInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo >::value_type *) &std_vector_Sl_pj_VideoDevInfo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::VideoDevInfo >::value_type *arg3 = 0 ;
  std::vector< pj::VideoDevInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::VideoDevInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::VideoDevInfo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_VideoDevInfo_Sg__doSet(arg1,arg2,(pj::VideoDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::VideoDevInfo >::value_type **)&jresult = new std::vector< pj::VideoDevInfo >::value_type((const std::vector< pj::VideoDevInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfoVector2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoDevInfoVector2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::VideoDevInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecFmtpVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >();
  *(std::vector< pj::CodecFmtp > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecFmtpVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = 0 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecFmtp > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >((std::vector< pj::CodecFmtp > const &)*arg1);
  *(std::vector< pj::CodecFmtp > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  result = ((std::vector< pj::CodecFmtp > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = (std::vector< pj::CodecFmtp >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  result = (bool)((std::vector< pj::CodecFmtp > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecFmtpVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::CodecFmtp *arg2 = 0 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::CodecFmtp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CodecFmtp const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::CodecFmtp > *)new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(arg1,(pj::CodecFmtp const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecFmtp > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_CodecFmtp_Sg__doSize((std::vector< pj::CodecFmtp > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = *(std::vector< pj::CodecFmtp >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecFmtp >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_CodecFmtp_Sg__doAdd__SWIG_0(arg1,(pj::CodecFmtp const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecFmtp >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CodecFmtp >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecFmtp >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__doAdd__SWIG_1(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecFmtp >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_CodecFmtp_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecFmtp >::value_type **)&jresult = new std::vector< pj::CodecFmtp >::value_type((const std::vector< pj::CodecFmtp >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecFmtp >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::CodecFmtp >::value_type *) &std_vector_Sl_pj_CodecFmtp_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecFmtp >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint arg2 ;
  std::vector< pj::CodecFmtp >::value_type *arg3 = 0 ;
  std::vector< pj::CodecFmtp >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CodecFmtp >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CodecFmtp >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_CodecFmtp_Sg__doSet(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CodecFmtp >::value_type **)&jresult = new std::vector< pj::CodecFmtp >::value_type((const std::vector< pj::CodecFmtp >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtpVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecFmtpVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::CodecFmtp > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatAudioVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::MediaFormatAudio > *)new std::vector< pj::MediaFormatAudio >();
  *(std::vector< pj::MediaFormatAudio > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatAudioVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = 0 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatAudio > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::MediaFormatAudio > *)new std::vector< pj::MediaFormatAudio >((std::vector< pj::MediaFormatAudio > const &)*arg1);
  *(std::vector< pj::MediaFormatAudio > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  result = ((std::vector< pj::MediaFormatAudio > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = (std::vector< pj::MediaFormatAudio >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  result = (bool)((std::vector< pj::MediaFormatAudio > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatAudioVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::MediaFormatAudio **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaFormatAudio const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::MediaFormatAudio > *)new_std_vector_Sl_pj_MediaFormatAudio_Sg___SWIG_2(arg1,(pj::MediaFormatAudio const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatAudio > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_MediaFormatAudio_Sg__doSize((std::vector< pj::MediaFormatAudio > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = *(std::vector< pj::MediaFormatAudio >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatAudio >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_MediaFormatAudio_Sg__doAdd__SWIG_0(arg1,(pj::MediaFormatAudio const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatAudio >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::MediaFormatAudio >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatAudio >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__doAdd__SWIG_1(arg1,arg2,(pj::MediaFormatAudio const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatAudio >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_MediaFormatAudio_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatAudio >::value_type **)&jresult = new std::vector< pj::MediaFormatAudio >::value_type((const std::vector< pj::MediaFormatAudio >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatAudio >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::MediaFormatAudio >::value_type *) &std_vector_Sl_pj_MediaFormatAudio_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatAudio >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatAudio >::value_type *arg3 = 0 ;
  std::vector< pj::MediaFormatAudio >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::MediaFormatAudio >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatAudio >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_MediaFormatAudio_Sg__doSet(arg1,arg2,(pj::MediaFormatAudio const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatAudio >::value_type **)&jresult = new std::vector< pj::MediaFormatAudio >::value_type((const std::vector< pj::MediaFormatAudio >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudioVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFormatAudioVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::MediaFormatAudio > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatVideoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::MediaFormatVideo > *)new std::vector< pj::MediaFormatVideo >();
  *(std::vector< pj::MediaFormatVideo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatVideoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = 0 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatVideo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::MediaFormatVideo > *)new std::vector< pj::MediaFormatVideo >((std::vector< pj::MediaFormatVideo > const &)*arg1);
  *(std::vector< pj::MediaFormatVideo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  result = ((std::vector< pj::MediaFormatVideo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = (std::vector< pj::MediaFormatVideo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  result = (bool)((std::vector< pj::MediaFormatVideo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatVideoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::MediaFormatVideo *arg2 = 0 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::MediaFormatVideo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaFormatVideo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::MediaFormatVideo > *)new_std_vector_Sl_pj_MediaFormatVideo_Sg___SWIG_2(arg1,(pj::MediaFormatVideo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatVideo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_MediaFormatVideo_Sg__doSize((std::vector< pj::MediaFormatVideo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = *(std::vector< pj::MediaFormatVideo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatVideo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_MediaFormatVideo_Sg__doAdd__SWIG_0(arg1,(pj::MediaFormatVideo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatVideo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::MediaFormatVideo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatVideo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::MediaFormatVideo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatVideo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_MediaFormatVideo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatVideo >::value_type **)&jresult = new std::vector< pj::MediaFormatVideo >::value_type((const std::vector< pj::MediaFormatVideo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatVideo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::MediaFormatVideo >::value_type *) &std_vector_Sl_pj_MediaFormatVideo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatVideo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint arg2 ;
  std::vector< pj::MediaFormatVideo >::value_type *arg3 = 0 ;
  std::vector< pj::MediaFormatVideo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::MediaFormatVideo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::MediaFormatVideo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_MediaFormatVideo_Sg__doSet(arg1,arg2,(pj::MediaFormatVideo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::MediaFormatVideo >::value_type **)&jresult = new std::vector< pj::MediaFormatVideo >::value_type((const std::vector< pj::MediaFormatVideo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFormatVideoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::MediaFormatVideo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallMediaInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >();
  *(std::vector< pj::CallMediaInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallMediaInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CallMediaInfo > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >((std::vector< pj::CallMediaInfo > const &)*arg1);
  *(std::vector< pj::CallMediaInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = (std::vector< pj::CallMediaInfo >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  result = (bool)((std::vector< pj::CallMediaInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallMediaInfoVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::CallMediaInfo *arg2 = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::CallMediaInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallMediaInfo const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::CallMediaInfo > *)new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(arg1,(pj::CallMediaInfo const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CallMediaInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg__doSize((std::vector< pj::CallMediaInfo > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = *(std::vector< pj::CallMediaInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CallMediaInfo >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_CallMediaInfo_Sg__doAdd__SWIG_0(arg1,(pj::CallMediaInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CallMediaInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CallMediaInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CallMediaInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__doAdd__SWIG_1(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CallMediaInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CallMediaInfo >::value_type **)&jresult = new std::vector< pj::CallMediaInfo >::value_type((const std::vector< pj::CallMediaInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CallMediaInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::CallMediaInfo >::value_type *) &std_vector_Sl_pj_CallMediaInfo_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CallMediaInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint arg2 ;
  std::vector< pj::CallMediaInfo >::value_type *arg3 = 0 ;
  std::vector< pj::CallMediaInfo >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::CallMediaInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::CallMediaInfo >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg__doSet(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::CallMediaInfo >::value_type **)&jresult = new std::vector< pj::CallMediaInfo >::value_type((const std::vector< pj::CallMediaInfo >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfoVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallMediaInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::CallMediaInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpFbCapVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::RtcpFbCap > *)new std::vector< pj::RtcpFbCap >();
  *(std::vector< pj::RtcpFbCap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpFbCapVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = 0 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::RtcpFbCap > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::RtcpFbCap > *)new std::vector< pj::RtcpFbCap >((std::vector< pj::RtcpFbCap > const &)*arg1);
  *(std::vector< pj::RtcpFbCap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  result = ((std::vector< pj::RtcpFbCap > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = (std::vector< pj::RtcpFbCap >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  result = (bool)((std::vector< pj::RtcpFbCap > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpFbCapVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::RtcpFbCap *arg2 = 0 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::RtcpFbCap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::RtcpFbCap const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::RtcpFbCap > *)new_std_vector_Sl_pj_RtcpFbCap_Sg___SWIG_2(arg1,(pj::RtcpFbCap const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::RtcpFbCap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_RtcpFbCap_Sg__doSize((std::vector< pj::RtcpFbCap > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = *(std::vector< pj::RtcpFbCap >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::RtcpFbCap >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_RtcpFbCap_Sg__doAdd__SWIG_0(arg1,(pj::RtcpFbCap const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint arg2 ;
  std::vector< pj::RtcpFbCap >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::RtcpFbCap >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::RtcpFbCap >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__doAdd__SWIG_1(arg1,arg2,(pj::RtcpFbCap const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint arg2 ;
  std::vector< pj::RtcpFbCap >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_RtcpFbCap_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::RtcpFbCap >::value_type **)&jresult = new std::vector< pj::RtcpFbCap >::value_type((const std::vector< pj::RtcpFbCap >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint arg2 ;
  std::vector< pj::RtcpFbCap >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::RtcpFbCap >::value_type *) &std_vector_Sl_pj_RtcpFbCap_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::RtcpFbCap >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint arg2 ;
  std::vector< pj::RtcpFbCap >::value_type *arg3 = 0 ;
  std::vector< pj::RtcpFbCap >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::RtcpFbCap >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::RtcpFbCap >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_RtcpFbCap_Sg__doSet(arg1,arg2,(pj::RtcpFbCap const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::RtcpFbCap >::value_type **)&jresult = new std::vector< pj::RtcpFbCap >::value_type((const std::vector< pj::RtcpFbCap >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCapVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpFbCapVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::RtcpFbCap > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SslCertNameVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< pj::SslCertName > *)new std::vector< pj::SslCertName >();
  *(std::vector< pj::SslCertName > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SslCertNameVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = 0 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SslCertName > const & reference is null");
    return 0;
  } 
  result = (std::vector< pj::SslCertName > *)new std::vector< pj::SslCertName >((std::vector< pj::SslCertName > const &)*arg1);
  *(std::vector< pj::SslCertName > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  result = ((std::vector< pj::SslCertName > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = (std::vector< pj::SslCertName >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  result = (bool)((std::vector< pj::SslCertName > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SslCertNameVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  pj::SslCertName *arg2 = 0 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(pj::SslCertName **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SslCertName const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< pj::SslCertName > *)new_std_vector_Sl_pj_SslCertName_Sg___SWIG_2(arg1,(pj::SslCertName const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SslCertName > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  try {
    result = std_vector_Sl_pj_SslCertName_Sg__doSize((std::vector< pj::SslCertName > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = *(std::vector< pj::SslCertName >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SslCertName >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_pj_SslCertName_Sg__doAdd__SWIG_0(arg1,(pj::SslCertName const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint arg2 ;
  std::vector< pj::SslCertName >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SslCertName >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SslCertName >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_pj_SslCertName_Sg__doAdd__SWIG_1(arg1,arg2,(pj::SslCertName const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint arg2 ;
  std::vector< pj::SslCertName >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_pj_SslCertName_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SslCertName >::value_type **)&jresult = new std::vector< pj::SslCertName >::value_type((const std::vector< pj::SslCertName >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint arg2 ;
  std::vector< pj::SslCertName >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< pj::SslCertName >::value_type *) &std_vector_Sl_pj_SslCertName_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SslCertName >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint arg2 ;
  std::vector< pj::SslCertName >::value_type *arg3 = 0 ;
  std::vector< pj::SslCertName >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< pj::SslCertName >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< pj::SslCertName >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_pj_SslCertName_Sg__doSet(arg1,arg2,(pj::SslCertName const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< pj::SslCertName >::value_type **)&jresult = new std::vector< pj::SslCertName >::value_type((const std::vector< pj::SslCertName >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertNameVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_pj_SslCertName_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SslCertNameVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< pj::SslCertName > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormat_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormat **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormat_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormat **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormat_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormat **)&jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormat_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormat **)&jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaFormat *)new pj::MediaFormat();
  *(pj::MediaFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaFormat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1clockRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1clockRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1channelCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1channelCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1frameTimeUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameTimeUsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1frameTimeUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (unsigned int) ((arg1)->frameTimeUsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1bitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bitsPerSample = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1bitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (unsigned int) ((arg1)->bitsPerSample);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1avgBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1avgBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1maxBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1maxBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatAudio(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaFormatAudio *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaFormatAudio *)new pj::MediaFormatAudio();
  *(pj::MediaFormatAudio **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFormatAudio(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaFormatAudio **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (unsigned int) ((arg1)->height);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1fpsNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsNum = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1fpsNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (int) ((arg1)->fpsNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1fpsDenum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsDenum = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1fpsDenum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (int) ((arg1)->fpsDenum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1avgBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1avgBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1maxBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1maxBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFormatVideo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaFormatVideo *)new pj::MediaFormatVideo();
  *(pj::MediaFormatVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFormatVideo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaFormatVideo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1portId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->portId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1portId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (int) ((arg1)->portId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *arg2 = (pj::MediaFormatAudio *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  arg2 = *(pj::MediaFormatAudio **)&jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (pj::MediaFormatAudio *)& ((arg1)->format);
  *(pj::MediaFormatAudio **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1txLevelAdj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->txLevelAdj = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1txLevelAdj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (float) ((arg1)->txLevelAdj);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1rxLevelAdj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rxLevelAdj = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1rxLevelAdj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (float) ((arg1)->rxLevelAdj);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1listeners_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  arg2 = *(pj::IntVector **)&jarg2; 
  if (arg1) (arg1)->listeners = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ConfPortInfo_1listeners_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  result = (pj::IntVector *)& ((arg1)->listeners);
  *(pj::IntVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ConfPortInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ConfPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ConfPortInfo *)new pj::ConfPortInfo();
  *(pj::ConfPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ConfPortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ConfPortInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Media(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Media *arg1 = (pj::Media *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Media **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Media_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pjmedia_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Media **)&jarg1; 
  result = (pjmedia_type)((pj::Media const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaTransmitParam_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaTransmitParam **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaTransmitParam_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaTransmitParam **)&jarg1; 
  result = (float) ((arg1)->level);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaTransmitParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioMediaTransmitParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioMediaTransmitParam *)new pj::AudioMediaTransmitParam();
  *(pj::AudioMediaTransmitParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaTransmitParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioMediaTransmitParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1getPortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::ConfPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  try {
    result = ((pj::AudioMedia const *)arg1)->getPortInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ConfPortInfo **)&jresult = new pj::ConfPortInfo((const pj::ConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1getPortId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  result = (int)((pj::AudioMedia const *)arg1)->getPortId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1getPortInfoFromId(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::ConfPortInfo result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  try {
    result = pj::AudioMedia::getPortInfoFromId(arg1);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ConfPortInfo **)&jresult = new pj::ConfPortInfo((const pj::ConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1startTransmit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia const & reference is null");
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit((pj::AudioMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1startTransmit2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  pj::AudioMediaTransmitParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia const & reference is null");
    return ;
  } 
  arg3 = *(pj::AudioMediaTransmitParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMediaTransmitParam const & reference is null");
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit2((pj::AudioMedia const &)*arg2,(pj::AudioMediaTransmitParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1stopTransmit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia const & reference is null");
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->stopTransmit((pj::AudioMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1adjustRxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustRxLevel(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1adjustTxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustTxLevel(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1getRxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getRxLevel();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1getTxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getTxLevel();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1typecastFromMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Media **)&jarg1; 
  result = (pj::AudioMedia *)pj::AudioMedia::typecastFromMedia(arg1);
  *(pj::AudioMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMedia(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioMedia *)new pj::AudioMedia();
  *(pj::AudioMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1formatId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->formatId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1formatId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  result = (pjmedia_format_id) ((arg1)->formatId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1payloadBitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->payloadBitsPerSample = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1payloadBitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->payloadBitsPerSample);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1sizeBytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeBytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1sizeBytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeBytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1sizeSamples_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeSamples = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayerInfo_1sizeSamples_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeSamples);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaPlayerInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayerInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioMediaPlayerInfo *)new pj::AudioMediaPlayerInfo();
  *(pj::AudioMediaPlayerInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaPlayerInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioMediaPlayerInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaPlayer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioMediaPlayer *)new SwigDirector_AudioMediaPlayer(jenv);
  *(pj::AudioMediaPlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1createPlayer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1createPlayer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1createPlaylist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (unsigned int)jarg4; 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1createPlaylist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1createPlaylist_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::AudioMediaPlayerInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  try {
    result = ((pj::AudioMediaPlayer const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioMediaPlayerInfo **)&jresult = new pj::AudioMediaPlayerInfo((const pj::AudioMediaPlayerInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1getPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  try {
    result = (pj_uint32_t)((pj::AudioMediaPlayer const *)arg1)->getPos();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1setPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  try {
    (arg1)->setPos(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1typecastFromAudioMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaPlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  result = (pj::AudioMediaPlayer *)pj::AudioMediaPlayer::typecastFromAudioMedia(arg1);
  *(pj::AudioMediaPlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaPlayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1onEof2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  (arg1)->onEof2();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1onEof2SwigExplicitAudioMediaPlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaPlayer **)&jarg1; 
  (arg1)->pj::AudioMediaPlayer::onEof2();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::AudioMediaPlayer *obj = *((pj::AudioMediaPlayer **)&objarg);
  (void)jcls;
  SwigDirector_AudioMediaPlayer *director = static_cast<SwigDirector_AudioMediaPlayer *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::AudioMediaPlayer *obj = *((pj::AudioMediaPlayer **)&objarg);
  SwigDirector_AudioMediaPlayer *director = dynamic_cast<SwigDirector_AudioMediaPlayer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioMediaRecorder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioMediaRecorder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioMediaRecorder *)new pj::AudioMediaRecorder();
  *(pj::AudioMediaRecorder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1createRecorder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  long arg4 ;
  unsigned int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaRecorder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (unsigned int)jarg5; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4,arg5);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1createRecorder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaRecorder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (long)jarg4; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1createRecorder_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaRecorder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1createRecorder_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMediaRecorder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1typecastFromAudioMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaRecorder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioMedia **)&jarg1; 
  result = (pj::AudioMediaRecorder *)pj::AudioMediaRecorder::typecastFromAudioMedia(arg1);
  *(pj::AudioMediaRecorder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioMediaRecorder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioMediaRecorder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDesc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ToneDesc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ToneDesc *)new pj::ToneDesc();
  *(pj::ToneDesc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDesc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ToneDesc *arg1 = (pj::ToneDesc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ToneDesc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ToneDigit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ToneDigit *)new pj::ToneDigit();
  *(pj::ToneDigit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDigit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ToneDigit *arg1 = (pj::ToneDigit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ToneDigit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1digit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1digit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1freq1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1freq1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  result = (int) ((arg1)->freq1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1freq2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigitMapDigit_1freq2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  result = (int) ((arg1)->freq2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneDigitMapDigit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ToneDigitMapDigit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ToneDigitMapDigit *)new pj::ToneDigitMapDigit();
  *(pj::ToneDigitMapDigit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneDigitMapDigit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ToneDigitMapDigit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ToneGenerator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::ToneGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::ToneGenerator *)new pj::ToneGenerator();
  *(pj::ToneGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ToneGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1createToneGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createToneGenerator(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1createToneGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->createToneGenerator(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1createToneGenerator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  try {
    (arg1)->createToneGenerator();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1isBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  result = (bool)((pj::ToneGenerator const *)arg1)->isBusy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  try {
    (arg1)->stop();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1rewind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  try {
    (arg1)->rewind();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1play_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = *(pj::ToneDescVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDescVector const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1play_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = *(pj::ToneDescVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDescVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1playDigits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = *(pj::ToneDigitVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDigitVector const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1playDigits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = *(pj::ToneDigitVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDigitVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1getDigitMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  try {
    result = ((pj::ToneGenerator const *)arg1)->getDigitMap();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::ToneDigitMapVector **)&jresult = new pj::ToneDigitMapVector((const pj::ToneDigitMapVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1setDigitMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::ToneGenerator **)&jarg1; 
  arg2 = *(pj::ToneDigitMapVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ToneDigitMapVector const & reference is null");
    return ;
  } 
  try {
    (arg1)->setDigitMap((pj::ToneDigitMapVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1inputCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->inputCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1inputCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->inputCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1outputCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->outputCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1outputCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->outputCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1defaultSamplesPerSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->defaultSamplesPerSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1defaultSamplesPerSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->defaultSamplesPerSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1driver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1driver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1caps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1caps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1routes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->routes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1routes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->routes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1extFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatAudioVector *arg2 = (pj::MediaFormatAudioVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  arg2 = *(pj::MediaFormatAudioVector **)&jarg2; 
  if (arg1) (arg1)->extFmt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioDevInfo_1extFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatAudioVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  result = (pj::MediaFormatAudioVector *)& ((arg1)->extFmt);
  *(pj::MediaFormatAudioVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudioDevInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudioDevInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudioDevInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudioDevInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudioDevInfo *)new pj::AudioDevInfo();
  *(pj::AudioDevInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getCaptureDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getCaptureDev();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getCaptureDevMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getCaptureDevMedia();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getPlaybackDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getPlaybackDev();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getPlaybackDevMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getPlaybackDevMedia();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setCaptureDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setCaptureDev(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setPlaybackDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setPlaybackDev(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1enumDev2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioDevInfoVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = ((pj::AudDevManager const *)arg1)->enumDev2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioDevInfoVector2 **)&jresult = new pj::AudioDevInfoVector2((const pj::AudioDevInfoVector2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setNullDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    (arg1)->setNullDev();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setNoDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaPort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  result = (pj::MediaPort *)(arg1)->setNoDev();
  *(pj::MediaPort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setSndDevMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setSndDevMode(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setEcOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->setEcOptions(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getEcTail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getEcTail();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1sndIsActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  result = (bool)((pj::AudDevManager const *)arg1)->sndIsActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1refreshDevs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    (arg1)->refreshDevs();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getDevCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  result = (unsigned int)((pj::AudDevManager const *)arg1)->getDevCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getDevInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  pj::AudioDevInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getDevInfo(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioDevInfo **)&jresult = new pj::AudioDevInfo((const pj::AudioDevInfo &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1lookupDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1capName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_cap arg2 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (pjmedia_aud_dev_cap)jarg2; 
  result = ((pj::AudDevManager const *)arg1)->capName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setExtFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = *(pj::MediaFormatAudio **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaFormatAudio const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setExtFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = *(pj::MediaFormatAudio **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaFormatAudio const & reference is null");
    return ;
  } 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getExtFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getExtFormat();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::MediaFormatAudio **)&jresult = new pj::MediaFormatAudio((const pj::MediaFormatAudio &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputLatency_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputLatency(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputLatency_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputLatency(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getInputLatency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputLatency();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputLatency_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputLatency(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputLatency_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputLatency(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getOutputLatency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputLatency();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputVolume(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputVolume(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getInputVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputVolume();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputVolume(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputVolume(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getOutputVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputVolume();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getInputSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputSignal();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getOutputSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputSignal();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputRoute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputRoute(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setInputRoute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setInputRoute(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getInputRoute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getInputRoute();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputRoute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputRoute(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setOutputRoute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setOutputRoute(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getOutputRoute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getOutputRoute();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setVad_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setVad(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setVad_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setVad(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getVad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getVad();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setCng_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setCng(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setCng_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setCng(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getCng(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getCng();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setPlc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setPlc(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1setPlc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setPlc(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevManager_1getPlc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevManager **)&jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getPlc();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1ExtraAudioDevice(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  pj::ExtraAudioDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (pj::ExtraAudioDevice *)new pj::ExtraAudioDevice(arg1,arg2);
  *(pj::ExtraAudioDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1ExtraAudioDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::ExtraAudioDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ExtraAudioDevice_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ExtraAudioDevice **)&jarg1; 
  (arg1)->open();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ExtraAudioDevice_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ExtraAudioDevice **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ExtraAudioDevice_1isOpened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::ExtraAudioDevice **)&jarg1; 
  result = (bool)(arg1)->isOpened();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaCoordinate_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaCoordinate **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaCoordinate_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaCoordinate **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaCoordinate_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaCoordinate **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaCoordinate_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaCoordinate **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaCoordinate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaCoordinate *)new pj::MediaCoordinate();
  *(pj::MediaCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaCoordinate **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaSize_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaSize **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaSize_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaSize **)&jarg1; 
  result = (unsigned int) ((arg1)->w);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaSize_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaSize **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaSize_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaSize **)&jarg1; 
  result = (unsigned int) ((arg1)->h);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaSize(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaSize *)new pj::MediaSize();
  *(pj::MediaSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaSize **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1portId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->portId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1portId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  result = (int) ((arg1)->portId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  arg2 = *(pj::MediaFormatVideo **)&jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->format);
  *(pj::MediaFormatVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1listeners_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  arg2 = *(pj::IntVector **)&jarg2; 
  if (arg1) (arg1)->listeners = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1listeners_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  result = (pj::IntVector *)& ((arg1)->listeners);
  *(pj::IntVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1transmitters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  arg2 = *(pj::IntVector **)&jarg2; 
  if (arg1) (arg1)->transmitters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidConfPortInfo_1transmitters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  result = (pj::IntVector *)& ((arg1)->transmitters);
  *(pj::IntVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VidConfPortInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VidConfPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VidConfPortInfo *)new pj::VidConfPortInfo();
  *(pj::VidConfPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VidConfPortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VidConfPortInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoMediaTransmitParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoMediaTransmitParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoMediaTransmitParam *)new pj::VideoMediaTransmitParam();
  *(pj::VideoMediaTransmitParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoMediaTransmitParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoMediaTransmitParam *arg1 = (pj::VideoMediaTransmitParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoMediaTransmitParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1getPortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VidConfPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoMedia **)&jarg1; 
  try {
    result = ((pj::VideoMedia const *)arg1)->getPortInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VidConfPortInfo **)&jresult = new pj::VidConfPortInfo((const pj::VidConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1getPortId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoMedia **)&jarg1; 
  result = (int)((pj::VideoMedia const *)arg1)->getPortId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1getPortInfoFromId(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::VidConfPortInfo result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  try {
    result = pj::VideoMedia::getPortInfoFromId(arg1);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VidConfPortInfo **)&jresult = new pj::VidConfPortInfo((const pj::VidConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1startTransmit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VideoMedia *arg2 = 0 ;
  pj::VideoMediaTransmitParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pj::VideoMedia **)&jarg1; 
  arg2 = *(pj::VideoMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoMedia const & reference is null");
    return ;
  } 
  arg3 = *(pj::VideoMediaTransmitParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoMediaTransmitParam const & reference is null");
    return ;
  } 
  try {
    ((pj::VideoMedia const *)arg1)->startTransmit((pj::VideoMedia const &)*arg2,(pj::VideoMediaTransmitParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1stopTransmit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VideoMedia *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoMedia **)&jarg1; 
  arg2 = *(pj::VideoMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoMedia const & reference is null");
    return ;
  } 
  try {
    ((pj::VideoMedia const *)arg1)->stopTransmit((pj::VideoMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoMedia(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoMedia *)new pj::VideoMedia();
  *(pj::VideoMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_WindowHandle_1setWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::WindowHandle **)&jarg1; 
  arg2 = (long long)jarg2; 
  pj_WindowHandle_setWindow(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1WindowHandle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::WindowHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::WindowHandle *)new pj::WindowHandle();
  *(pj::WindowHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1WindowHandle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::WindowHandle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowHandle_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type arg2 ;
  pjmedia_vid_dev_hwnd_type *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowHandle **)&jarg1; 
  argp2 = *(pjmedia_vid_dev_hwnd_type **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pjmedia_vid_dev_hwnd_type");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowHandle_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowHandle **)&jarg1; 
  result =  ((arg1)->type);
  *(pjmedia_vid_dev_hwnd_type **)&jresult = new pjmedia_vid_dev_hwnd_type((const pjmedia_vid_dev_hwnd_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowHandle_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *arg2 = (pj::WindowHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindowHandle **)&jarg1; 
  arg2 = *(pj::WindowHandle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowHandle_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowHandle **)&jarg1; 
  result = (pj::WindowHandle *)& ((arg1)->handle);
  *(pj::WindowHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoWindowHandle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoWindowHandle *)new pj::VideoWindowHandle();
  *(pj::VideoWindowHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoWindowHandle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoWindowHandle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1isNative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isNative = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1isNative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (bool) ((arg1)->isNative);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1winHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = *(pj::VideoWindowHandle **)&jarg2; 
  if (arg1) (arg1)->winHandle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1winHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->winHandle);
  *(pj::VideoWindowHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1renderDeviceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->renderDeviceId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1renderDeviceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (int) ((arg1)->renderDeviceId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1show_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1show_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (bool) ((arg1)->show);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *arg2 = (pj::MediaCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = *(pj::MediaCoordinate **)&jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (pj::MediaCoordinate *)& ((arg1)->pos);
  *(pj::MediaCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *arg2 = (pj::MediaSize *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  arg2 = *(pj::MediaSize **)&jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindowInfo_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  result = (pj::MediaSize *)& ((arg1)->size);
  *(pj::MediaSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoWindowInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoWindowInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoWindowInfo *)new pj::VideoWindowInfo();
  *(pj::VideoWindowInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoWindowInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoWindowInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoWindow(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::VideoWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (pj::VideoWindow *)new pj::VideoWindow(arg1);
  *(pj::VideoWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  try {
    result = ((pj::VideoWindow const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoWindowInfo **)&jresult = new pj::VideoWindowInfo((const pj::VideoWindowInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1getVideoMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoMedia result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  try {
    result = (arg1)->getVideoMedia();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoMedia **)&jresult = new pj::VideoMedia((const pj::VideoMedia &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1Show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->Show(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1setPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = *(pj::MediaCoordinate **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaCoordinate const & reference is null");
    return ;
  } 
  try {
    (arg1)->setPos((pj::MediaCoordinate const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaSize *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = *(pj::MediaSize **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaSize const & reference is null");
    return ;
  } 
  try {
    (arg1)->setSize((pj::MediaSize const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->rotate(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1setWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = *(pj::VideoWindowHandle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoWindowHandle const & reference is null");
    return ;
  } 
  try {
    (arg1)->setWindow((pj::VideoWindowHandle const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoWindow_1setFullScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setFullScreen(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoWindow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1rendId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->rendId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1rendId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->rendId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1show_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1show_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  result = (bool) ((arg1)->show);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1windowFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1windowFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormat *arg2 = (pj::MediaFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  arg2 = *(pj::MediaFormat **)&jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  result = (pj::MediaFormat *)& ((arg1)->format);
  *(pj::MediaFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1window_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  arg2 = *(pj::VideoWindowHandle **)&jarg2; 
  if (arg1) (arg1)->window = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreviewOpParam_1window_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->window);
  *(pj::VideoWindowHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoPreviewOpParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoPreviewOpParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoPreviewOpParam *)new pj::VideoPreviewOpParam();
  *(pj::VideoPreviewOpParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoPreviewOpParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoPreviewOpParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoPreview(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::VideoPreview *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (pj::VideoPreview *)new pj::VideoPreview(arg1);
  *(pj::VideoPreview **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreview_1hasNative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  result = (bool)(arg1)->hasNative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreview_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  pj::VideoPreviewOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  arg2 = *(pj::VideoPreviewOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoPreviewOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->start((pj::VideoPreviewOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreview_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  try {
    (arg1)->stop();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreview_1getVideoWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  SwigValueWrapper< pj::VideoWindow > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  result = (arg1)->getVideoWindow();
  *(pj::VideoWindow **)&jresult = new pj::VideoWindow((const pj::VideoWindow &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoPreview_1getVideoMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  pj::VideoMedia result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  try {
    result = (arg1)->getVideoMedia();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoMedia **)&jresult = new pj::VideoMedia((const pj::VideoMedia &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoPreview(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoPreview **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1driver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1driver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1caps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1caps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1fmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVideoVector *arg2 = (pj::MediaFormatVideoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  arg2 = *(pj::MediaFormatVideoVector **)&jarg2; 
  if (arg1) (arg1)->fmt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoDevInfo_1fmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVideoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  result = (pj::MediaFormatVideoVector *)& ((arg1)->fmt);
  *(pj::MediaFormatVideoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoDevInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoDevInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoDevInfo *)new pj::VideoDevInfo();
  *(pj::VideoDevInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoDevInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoDevInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoSwitchParam_1target_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoSwitchParam **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->target_id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoSwitchParam_1target_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VideoSwitchParam **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->target_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VideoSwitchParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VideoSwitchParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VideoSwitchParam *)new pj::VideoSwitchParam();
  *(pj::VideoSwitchParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VideoSwitchParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VideoSwitchParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1refreshDevs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  try {
    (arg1)->refreshDevs();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1getDevCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  result = (unsigned int)(arg1)->getDevCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1getDevInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoDevInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getDevInfo(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoDevInfo **)&jresult = new pj::VideoDevInfo((const pj::VideoDevInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1enumDev2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::VideoDevInfoVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  try {
    result = ((pj::VidDevManager const *)arg1)->enumDev2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoDevInfoVector2 **)&jresult = new pj::VideoDevInfoVector2((const pj::VideoDevInfoVector2 &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1lookupDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (int)((pj::VidDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1capName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_cap arg2 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (pjmedia_vid_dev_cap)jarg2; 
  result = ((pj::VidDevManager const *)arg1)->capName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1setFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(pj::MediaFormatVideo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaFormatVideo const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setFormat(arg2,(pj::MediaFormatVideo const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getFormat(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::MediaFormatVideo **)&jresult = new pj::MediaFormatVideo((const pj::MediaFormatVideo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1setInputScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(pj::MediaSize **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::MediaSize const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setInputScale(arg2,(pj::MediaSize const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1getInputScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getInputScale(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::MediaSize **)&jresult = new pj::MediaSize((const pj::MediaSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1setOutputWindowFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setOutputWindowFlags(arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1getOutputWindowFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)(arg1)->getOutputWindowFlags(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1switchDev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoSwitchParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(pj::VideoSwitchParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VideoSwitchParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->switchDev(arg2,(pj::VideoSwitchParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1isCaptureActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((pj::VidDevManager const *)arg1)->isCaptureActive(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1setCaptureOrient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidDevManager_1setCaptureOrient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidDevManager **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1codecId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1codecId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  result = (pj_uint8_t) ((arg1)->priority);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1desc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->desc = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecInfo_1desc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->desc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecInfo *)new pj::CodecInfo();
  *(pj::CodecInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtp_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecFmtp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtp_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecFmtp **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtp_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecFmtp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->val = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecFmtp_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecFmtp **)&jarg1; 
  result = (pj::string *) & ((arg1)->val);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecFmtp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecFmtp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecFmtp *)new pj::CodecFmtp();
  *(pj::CodecFmtp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecFmtp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecFmtp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1clockRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1clockRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1channelCnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCnt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1channelCnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->channelCnt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1avgBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1avgBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->avgBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1maxBps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1maxBps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->maxBps);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1maxRxFrameSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxRxFrameSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1maxRxFrameSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->maxRxFrameSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1frameLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameLen = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1frameLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->frameLen);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1pcmBitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pcmBitsPerSample = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1pcmBitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->pcmBitsPerSample);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1pt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1pt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->pt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1fmtId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->fmtId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamInfo_1fmtId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  result = (pjmedia_format_id) ((arg1)->fmtId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecParamInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecParamInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecParamInfo *)new pj::CodecParamInfo();
  *(pj::CodecParamInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecParamInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecParamInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1frmPerPkt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frmPerPkt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1frmPerPkt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (unsigned int) ((arg1)->frmPerPkt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1vad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vad = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1vad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (bool) ((arg1)->vad);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1cng_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cng = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1cng_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (bool) ((arg1)->cng);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1penh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->penh = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1penh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (bool) ((arg1)->penh);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1plc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->plc = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1plc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (bool) ((arg1)->plc);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (bool) ((arg1)->reserved);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1encFmtp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = *(pj::CodecFmtpVector **)&jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1encFmtp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  *(pj::CodecFmtpVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1decFmtp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  arg2 = *(pj::CodecFmtpVector **)&jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParamSetting_1decFmtp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  *(pj::CodecFmtpVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecParamSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecParamSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecParamSetting *)new pj::CodecParamSetting();
  *(pj::CodecParamSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecParamSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecParamSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParam_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *arg2 = (pj::CodecParamInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CodecParam **)&jarg1; 
  arg2 = *(pj::CodecParamInfo **)&jarg2; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParam_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParam **)&jarg1; 
  result = (pj::CodecParamInfo *)& ((arg1)->info);
  *(pj::CodecParamInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParam_1setting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *arg2 = (pj::CodecParamSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CodecParam **)&jarg1; 
  arg2 = *(pj::CodecParamSetting **)&jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecParam_1setting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecParam **)&jarg1; 
  result = (pj::CodecParamSetting *)& ((arg1)->setting);
  *(pj::CodecParamSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecParam *)new pj::CodecParam();
  *(pj::CodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1sample_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1sample_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->sample_rate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1channel_1cnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channel_cnt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1channel_1cnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->channel_cnt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1frm_1ptime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frm_ptime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1frm_1ptime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->frm_ptime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1bit_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bit_rate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1bit_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->bit_rate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1packet_1loss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->packet_loss = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1packet_1loss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->packet_loss);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1complexity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->complexity = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1complexity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->complexity);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1cbr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cbr = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CodecOpusConfig_1cbr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  result = (bool) ((arg1)->cbr);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CodecOpusConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CodecOpusConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CodecOpusConfig *)new pj::CodecOpusConfig();
  *(pj::CodecOpusConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CodecOpusConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CodecOpusConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1packing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = (pjmedia_vid_packing)jarg2; 
  if (arg1) (arg1)->packing = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1packing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pjmedia_vid_packing) ((arg1)->packing);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = *(pj::MediaFormatVideo **)&jarg2; 
  if (arg1) (arg1)->encFmt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->encFmt);
  *(pj::MediaFormatVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encFmtp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = *(pj::CodecFmtpVector **)&jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encFmtp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  *(pj::CodecFmtpVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encMtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->encMtu = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1encMtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (unsigned int) ((arg1)->encMtu);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1decFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = *(pj::MediaFormatVideo **)&jarg2; 
  if (arg1) (arg1)->decFmt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1decFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->decFmt);
  *(pj::MediaFormatVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1decFmtp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = *(pj::CodecFmtpVector **)&jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1decFmtp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  *(pj::CodecFmtpVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1ignoreFmtp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignoreFmtp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VidCodecParam_1ignoreFmtp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  result = (bool) ((arg1)->ignoreFmtp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1VidCodecParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::VidCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::VidCodecParam *)new pj::VidCodecParam();
  *(pj::VidCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1VidCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::VidCodecParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFmtChangedEvent_1newWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFmtChangedEvent **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newWidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFmtChangedEvent_1newWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFmtChangedEvent **)&jarg1; 
  result = (unsigned int) ((arg1)->newWidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFmtChangedEvent_1newHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFmtChangedEvent **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newHeight = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFmtChangedEvent_1newHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaFmtChangedEvent **)&jarg1; 
  result = (unsigned int) ((arg1)->newHeight);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaFmtChangedEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaFmtChangedEvent *)new pj::MediaFmtChangedEvent();
  *(pj::MediaFmtChangedEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaFmtChangedEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaFmtChangedEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudDevErrorEvent_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AudDevErrorEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AudDevErrorEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AudDevErrorEvent *)new pj::AudDevErrorEvent();
  *(pj::AudDevErrorEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AudDevErrorEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AudDevErrorEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1fmtChanged_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *arg2 = (pj::MediaFmtChangedEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  arg2 = *(pj::MediaFmtChangedEvent **)&jarg2; 
  if (arg1) (arg1)->fmtChanged = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1fmtChanged_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  result = (pj::MediaFmtChangedEvent *)& ((arg1)->fmtChanged);
  *(pj::MediaFmtChangedEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1audDevError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::AudDevErrorEvent *arg2 = (pj::AudDevErrorEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  arg2 = *(pj::AudDevErrorEvent **)&jarg2; 
  if (arg1) (arg1)->audDevError = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1audDevError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::AudDevErrorEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  result = (pj::AudDevErrorEvent *)& ((arg1)->audDevError);
  *(pj::AudDevErrorEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1ptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  arg2 = *(pj::GenericData *)&jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEventData_1ptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  result = (pj::GenericData) ((arg1)->ptr);
  *(pj::GenericData *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaEventData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaEventData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaEventData *)new pj::MediaEventData();
  *(pj::MediaEventData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaEventData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaEventData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  arg2 = (pjmedia_event_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  result = (pjmedia_event_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *arg2 = (pj::MediaEventData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  arg2 = *(pj::MediaEventData **)&jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  result = (pj::MediaEventData *)& ((arg1)->data);
  *(pj::MediaEventData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1pjMediaEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjMediaEvent = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaEvent_1pjMediaEvent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  result = (void *) ((arg1)->pjMediaEvent);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaEvent *)new pj::MediaEvent();
  *(pj::MediaEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  arg2 = (pjsua_buddy_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  result = (pjsua_buddy_status) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1statusText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1statusText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1activity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  arg2 = (pjrpid_activity)jarg2; 
  if (arg1) (arg1)->activity = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1activity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  result = (pjrpid_activity) ((arg1)->activity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1note_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1note_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1rpidId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->rpidId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresenceStatus_1rpidId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  result = (pj::string *) & ((arg1)->rpidId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1PresenceStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::PresenceStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::PresenceStatus *)new pj::PresenceStatus();
  *(pj::PresenceStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1PresenceStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::PresenceStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1subscribe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->subscribe = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1subscribe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  result = (bool) ((arg1)->subscribe);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::BuddyConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::BuddyConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::BuddyConfig *)new pj::BuddyConfig();
  *(pj::BuddyConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1BuddyConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::BuddyConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1contact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contact = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1contact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->contact);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1presMonitorEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->presMonitorEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1presMonitorEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (bool) ((arg1)->presMonitorEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->subState = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pjsip_evsub_state) ((arg1)->subState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subStateName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->subStateName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subStateName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->subStateName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subTermCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->subTermCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subTermCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->subTermCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subTermReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->subTermReason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1subTermReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->subTermReason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1presStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *arg2 = (pj::PresenceStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  arg2 = *(pj::PresenceStatus **)&jarg2; 
  if (arg1) (arg1)->presStatus = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyInfo_1presStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  result = (pj::PresenceStatus *)& ((arg1)->presStatus);
  *(pj::PresenceStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1BuddyInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::BuddyInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::BuddyInfo *)new pj::BuddyInfo();
  *(pj::BuddyInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1BuddyInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::BuddyInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnBuddyEvSubStateParam_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnBuddyEvSubStateParam **)&jarg1; 
  arg2 = *(pj::SipEvent **)&jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnBuddyEvSubStateParam_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnBuddyEvSubStateParam **)&jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  *(pj::SipEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnBuddyEvSubStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnBuddyEvSubStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnBuddyEvSubStateParam *)new pj::OnBuddyEvSubStateParam();
  *(pj::OnBuddyEvSubStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnBuddyEvSubStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnBuddyEvSubStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Buddy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Buddy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::Buddy *)new SwigDirector_Buddy(jenv);
  *(pj::Buddy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Buddy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Buddy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::Account *arg2 = 0 ;
  pj::BuddyConfig *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = *(pj::Account **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Account & reference is null");
    return ;
  } 
  arg3 = *(pj::BuddyConfig **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::BuddyConfig const & reference is null");
    return ;
  } 
  try {
    (arg1)->create(*arg2,(pj::BuddyConfig const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  result = (bool)((pj::Buddy const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::BuddyInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  try {
    result = ((pj::Buddy const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::BuddyInfo **)&jresult = new pj::BuddyInfo((const pj::BuddyInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1subscribePresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->subscribePresence(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1updatePresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  try {
    (arg1)->updatePresence();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1sendInstantMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = *(pj::SendInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SendInstantMessageParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1sendTypingIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = *(pj::SendTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SendTypingIndicationParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1onBuddyState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  (arg1)->onBuddyState();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1onBuddyStateSwigExplicitBuddy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Buddy **)&jarg1; 
  (arg1)->pj::Buddy::onBuddyState();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1onBuddyEvSubState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = *(pj::OnBuddyEvSubStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnBuddyEvSubStateParam & reference is null");
    return ;
  } 
  (arg1)->onBuddyEvSubState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1onBuddyEvSubStateSwigExplicitBuddy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Buddy **)&jarg1; 
  arg2 = *(pj::OnBuddyEvSubStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnBuddyEvSubStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Buddy::onBuddyEvSubState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::Buddy *obj = *((pj::Buddy **)&objarg);
  (void)jcls;
  SwigDirector_Buddy *director = static_cast<SwigDirector_Buddy *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Buddy_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::Buddy *obj = *((pj::Buddy **)&objarg);
  SwigDirector_Buddy *director = dynamic_cast<SwigDirector_Buddy *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1registrarUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->registrarUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1registrarUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->registrarUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1registerOnAdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->registerOnAdd = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1registerOnAdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (bool) ((arg1)->registerOnAdd);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = *(pj::SipHeaderVector **)&jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  *(pj::SipHeaderVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1contactParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1contactParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1timeoutSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timeoutSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1timeoutSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->timeoutSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1retryIntervalSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->retryIntervalSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1retryIntervalSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->retryIntervalSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1firstRetryIntervalSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->firstRetryIntervalSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1firstRetryIntervalSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->firstRetryIntervalSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1randomRetryIntervalSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->randomRetryIntervalSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1randomRetryIntervalSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->randomRetryIntervalSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1delayBeforeRefreshSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->delayBeforeRefreshSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1delayBeforeRefreshSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->delayBeforeRefreshSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1dropCallsOnFail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dropCallsOnFail = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1dropCallsOnFail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (bool) ((arg1)->dropCallsOnFail);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1unregWaitMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->unregWaitMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1unregWaitMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->unregWaitMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1proxyUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proxyUse = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1proxyUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->proxyUse);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountRegConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountRegConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountRegConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountRegConfig *)new pj::AccountRegConfig();
  *(pj::AccountRegConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountRegConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountRegConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authCreds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *arg2 = (pj::AuthCredInfoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = *(pj::AuthCredInfoVector **)&jarg2; 
  if (arg1) (arg1)->authCreds = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authCreds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::AuthCredInfoVector *)& ((arg1)->authCreds);
  *(pj::AuthCredInfoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1proxies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2; 
  if (arg1) (arg1)->proxies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1proxies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::StringVector *)& ((arg1)->proxies);
  *(pj::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactForced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactForced = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactForced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactForced);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactUriParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactUriParams = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1contactUriParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactUriParams);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authInitialEmpty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->authInitialEmpty = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authInitialEmpty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (bool) ((arg1)->authInitialEmpty);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authInitialAlgorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->authInitialAlgorithm = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1authInitialAlgorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->authInitialAlgorithm);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1transportId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1transportId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountSipConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountSipConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountSipConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountSipConfig *)new pj::AccountSipConfig();
  *(pj::AccountSipConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountSipConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountSipConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1holdType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = (pjsua_call_hold_type)jarg2; 
  if (arg1) (arg1)->holdType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1holdType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  result = (pjsua_call_hold_type) ((arg1)->holdType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1prackUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = (pjsua_100rel_use)jarg2; 
  if (arg1) (arg1)->prackUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1prackUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  result = (pjsua_100rel_use) ((arg1)->prackUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = (pjsua_sip_timer_use)jarg2; 
  if (arg1) (arg1)->timerUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  result = (pjsua_sip_timer_use) ((arg1)->timerUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerMinSESec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerMinSESec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerMinSESec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->timerMinSESec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerSessExpiresSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerSessExpiresSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1timerSessExpiresSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->timerSessExpiresSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountCallConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountCallConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountCallConfig *)new pj::AccountCallConfig();
  *(pj::AccountCallConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountCallConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountCallConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountCallConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = *(pj::SipHeaderVector **)&jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  *(pj::SipHeaderVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  result = (bool) ((arg1)->publishEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishQueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishQueue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  result = (bool) ((arg1)->publishQueue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishShutdownWaitMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->publishShutdownWaitMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1publishShutdownWaitMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->publishShutdownWaitMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1pidfTupleId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->pidfTupleId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1pidfTupleId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->pidfTupleId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountPresConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountPresConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountPresConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountPresConfig *)new pj::AccountPresConfig();
  *(pj::AccountPresConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountPresConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountPresConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1enabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1enabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1expirationSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->expirationSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1expirationSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->expirationSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountMwiConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountMwiConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountMwiConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountMwiConfig *)new pj::AccountMwiConfig();
  *(pj::AccountMwiConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountMwiConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountMwiConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipStunUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->sipStunUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipStunUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pjsua_stun_use) ((arg1)->sipStunUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1mediaStunUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->mediaStunUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1mediaStunUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pjsua_stun_use) ((arg1)->mediaStunUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1nat64Opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (pjsua_nat64_opt)jarg2; 
  if (arg1) (arg1)->nat64Opt = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1nat64Opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pjsua_nat64_opt) ((arg1)->nat64Opt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (bool) ((arg1)->iceEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceMaxHostCands_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceMaxHostCands = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceMaxHostCands_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->iceMaxHostCands);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceAggressiveNomination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAggressiveNomination = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceAggressiveNomination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (bool) ((arg1)->iceAggressiveNomination);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceNominatedCheckDelayMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iceNominatedCheckDelayMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceNominatedCheckDelayMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->iceNominatedCheckDelayMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceWaitNominationTimeoutMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceWaitNominationTimeoutMsec = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceWaitNominationTimeoutMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->iceWaitNominationTimeoutMsec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceNoRtcp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceNoRtcp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceNoRtcp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (bool) ((arg1)->iceNoRtcp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceAlwaysUpdate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAlwaysUpdate = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1iceAlwaysUpdate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (bool) ((arg1)->iceAlwaysUpdate);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->turnEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (bool) ((arg1)->turnEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnServer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->turnServer = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnServer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->turnServer);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnConnType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (pj_turn_tp_type)jarg2; 
  if (arg1) (arg1)->turnConnType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnConnType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj_turn_tp_type) ((arg1)->turnConnType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnUserName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->turnUserName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnUserName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->turnUserName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnPasswordType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->turnPasswordType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnPasswordType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->turnPasswordType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->turnPassword = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1turnPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->turnPassword);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactRewriteUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactRewriteUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->contactRewriteUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactRewriteMethod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteMethod = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactRewriteMethod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->contactRewriteMethod);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactUseSrcPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactUseSrcPort = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1contactUseSrcPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->contactUseSrcPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1viaRewriteUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viaRewriteUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1viaRewriteUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->viaRewriteUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sdpNatRewriteUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sdpNatRewriteUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sdpNatRewriteUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->sdpNatRewriteUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipOutboundUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (int) ((arg1)->sipOutboundUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundInstanceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->sipOutboundInstanceId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundInstanceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundInstanceId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundRegId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->sipOutboundRegId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1sipOutboundRegId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundRegId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1udpKaIntervalSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->udpKaIntervalSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1udpKaIntervalSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->udpKaIntervalSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1udpKaData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->udpKaData = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1udpKaData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->udpKaData);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountNatConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountNatConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountNatConfig *)new pj::AccountNatConfig();
  *(pj::AccountNatConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountNatConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountNatConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountNatConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  result = (pj::string *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpCrypto_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SrtpCrypto(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SrtpCrypto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SrtpCrypto *)new pj::SrtpCrypto();
  *(pj::SrtpCrypto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SrtpCrypto(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SrtpCrypto **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1cryptos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *arg2 = (pj::SrtpCryptoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  arg2 = *(pj::SrtpCryptoVector **)&jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1cryptos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  result = (pj::SrtpCryptoVector *)& ((arg1)->cryptos);
  *(pj::SrtpCryptoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1keyings_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  arg2 = *(pj::IntVector **)&jarg2; 
  if (arg1) (arg1)->keyings = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1keyings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  result = (pj::IntVector *)& ((arg1)->keyings);
  *(pj::IntVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SrtpOpt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SrtpOpt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SrtpOpt *)new pj::SrtpOpt();
  *(pj::SrtpOpt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::SrtpOpt const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SrtpOpt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SrtpOpt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1codecId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1codecId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  arg2 = (pjmedia_rtcp_fb_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  result = (pjmedia_rtcp_fb_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1typeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1typeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->param = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbCap_1param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  result = (pj::string *) & ((arg1)->param);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpFbCap(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RtcpFbCap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RtcpFbCap *)new pj::RtcpFbCap();
  *(pj::RtcpFbCap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpFbCap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RtcpFbCap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1dontUseAvpf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dontUseAvpf = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1dontUseAvpf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  result = (bool) ((arg1)->dontUseAvpf);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1caps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *arg2 = (pj::RtcpFbCapVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  arg2 = *(pj::RtcpFbCapVector **)&jarg2; 
  if (arg1) (arg1)->caps = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1caps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  result = (pj::RtcpFbCapVector *)& ((arg1)->caps);
  *(pj::RtcpFbCapVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpFbConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RtcpFbConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RtcpFbConfig *)new pj::RtcpFbConfig();
  *(pj::RtcpFbConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::RtcpFbConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpFbConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RtcpFbConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1transportConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *arg2 = (pj::TransportConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = *(pj::TransportConfig **)&jarg2; 
  if (arg1) (arg1)->transportConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1transportConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (pj::TransportConfig *)& ((arg1)->transportConfig);
  *(pj::TransportConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1lockCodecEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lockCodecEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1lockCodecEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (bool) ((arg1)->lockCodecEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1streamKaEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->streamKaEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1streamKaEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (bool) ((arg1)->streamKaEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpSecureSignaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srtpSecureSignaling = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpSecureSignaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (int) ((arg1)->srtpSecureSignaling);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpOpt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *arg2 = (pj::SrtpOpt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = *(pj::SrtpOpt **)&jarg2; 
  if (arg1) (arg1)->srtpOpt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1srtpOpt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (pj::SrtpOpt *)& ((arg1)->srtpOpt);
  *(pj::SrtpOpt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1ipv6Use_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = (pjsua_ipv6_use)jarg2; 
  if (arg1) (arg1)->ipv6Use = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1ipv6Use_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (pjsua_ipv6_use) ((arg1)->ipv6Use);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1rtcpMuxEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rtcpMuxEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1rtcpMuxEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (bool) ((arg1)->rtcpMuxEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1rtcpFbConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *arg2 = (pj::RtcpFbConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = *(pj::RtcpFbConfig **)&jarg2; 
  if (arg1) (arg1)->rtcpFbConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1rtcpFbConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  result = (pj::RtcpFbConfig *)& ((arg1)->rtcpFbConfig);
  *(pj::RtcpFbConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountMediaConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountMediaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountMediaConfig *)new pj::AccountMediaConfig();
  *(pj::AccountMediaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountMediaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountMediaConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountMediaConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1autoShowIncoming_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoShowIncoming = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1autoShowIncoming_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (bool) ((arg1)->autoShowIncoming);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1autoTransmitOutgoing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoTransmitOutgoing = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1autoTransmitOutgoing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (bool) ((arg1)->autoTransmitOutgoing);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1windowFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1windowFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1defaultCaptureDevice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultCaptureDevice = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1defaultCaptureDevice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultCaptureDevice);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1defaultRenderDevice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultRenderDevice = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1defaultRenderDevice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultRenderDevice);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1rateControlMethod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (pjmedia_vid_stream_rc_method)jarg2; 
  if (arg1) (arg1)->rateControlMethod = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1rateControlMethod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (pjmedia_vid_stream_rc_method) ((arg1)->rateControlMethod);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1rateControlBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rateControlBandwidth = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1rateControlBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->rateControlBandwidth);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1startKeyframeCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1startKeyframeCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1startKeyframeInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeInterval = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1startKeyframeInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeInterval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountVideoConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountVideoConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountVideoConfig *)new pj::AccountVideoConfig();
  *(pj::AccountVideoConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountVideoConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountVideoConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountVideoConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1shutdownTp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shutdownTp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1shutdownTp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  result = (bool) ((arg1)->shutdownTp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1hangupCalls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hangupCalls = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1hangupCalls_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  result = (bool) ((arg1)->hangupCalls);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1reinviteFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reinviteFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1reinviteFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->reinviteFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountIpChangeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountIpChangeConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountIpChangeConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountIpChangeConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountIpChangeConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountIpChangeConfig *)new pj::AccountIpChangeConfig();
  *(pj::AccountIpChangeConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (int) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1idUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->idUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1idUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->idUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1regConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *arg2 = (pj::AccountRegConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountRegConfig **)&jarg2; 
  if (arg1) (arg1)->regConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1regConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountRegConfig *)& ((arg1)->regConfig);
  *(pj::AccountRegConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1sipConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *arg2 = (pj::AccountSipConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountSipConfig **)&jarg2; 
  if (arg1) (arg1)->sipConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1sipConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountSipConfig *)& ((arg1)->sipConfig);
  *(pj::AccountSipConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1callConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *arg2 = (pj::AccountCallConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountCallConfig **)&jarg2; 
  if (arg1) (arg1)->callConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1callConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountCallConfig *)& ((arg1)->callConfig);
  *(pj::AccountCallConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1presConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *arg2 = (pj::AccountPresConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountPresConfig **)&jarg2; 
  if (arg1) (arg1)->presConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1presConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountPresConfig *)& ((arg1)->presConfig);
  *(pj::AccountPresConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1mwiConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *arg2 = (pj::AccountMwiConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountMwiConfig **)&jarg2; 
  if (arg1) (arg1)->mwiConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1mwiConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountMwiConfig *)& ((arg1)->mwiConfig);
  *(pj::AccountMwiConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1natConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *arg2 = (pj::AccountNatConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountNatConfig **)&jarg2; 
  if (arg1) (arg1)->natConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1natConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountNatConfig *)& ((arg1)->natConfig);
  *(pj::AccountNatConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1mediaConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *arg2 = (pj::AccountMediaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountMediaConfig **)&jarg2; 
  if (arg1) (arg1)->mediaConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1mediaConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountMediaConfig *)& ((arg1)->mediaConfig);
  *(pj::AccountMediaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1videoConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *arg2 = (pj::AccountVideoConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountVideoConfig **)&jarg2; 
  if (arg1) (arg1)->videoConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1videoConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountVideoConfig *)& ((arg1)->videoConfig);
  *(pj::AccountVideoConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1ipChangeConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *arg2 = (pj::AccountIpChangeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::AccountIpChangeConfig **)&jarg2; 
  if (arg1) (arg1)->ipChangeConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1ipChangeConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  result = (pj::AccountIpChangeConfig *)& ((arg1)->ipChangeConfig);
  *(pj::AccountIpChangeConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountConfig *)new pj::AccountConfig();
  *(pj::AccountConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::AccountConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pjsua_acc_id) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1isDefault_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefault = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1isDefault_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (bool) ((arg1)->isDefault);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regIsConfigured_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsConfigured = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regIsConfigured_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (bool) ((arg1)->regIsConfigured);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regIsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regIsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (bool) ((arg1)->regIsActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regExpiresSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->regExpiresSec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regExpiresSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->regExpiresSec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->regStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->regStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regStatusText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->regStatusText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regStatusText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->regStatusText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regLastErr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->regLastErr = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1regLastErr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pj_status_t) ((arg1)->regLastErr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1onlineStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->onlineStatus = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1onlineStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (bool) ((arg1)->onlineStatus);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1onlineStatusText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->onlineStatusText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountInfo_1onlineStatusText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->onlineStatusText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1AccountInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::AccountInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::AccountInfo *)new pj::AccountInfo();
  *(pj::AccountInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1AccountInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::AccountInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingCallParam_1callId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingCallParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingCallParam_1callId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingCallParam **)&jarg1; 
  result = (int) ((arg1)->callId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingCallParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnIncomingCallParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingCallParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingCallParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnIncomingCallParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnIncomingCallParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnIncomingCallParam *)new pj::OnIncomingCallParam();
  *(pj::OnIncomingCallParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnIncomingCallParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnIncomingCallParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStartedParam_1renew_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStartedParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->renew = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStartedParam_1renew_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStartedParam **)&jarg1; 
  result = (bool) ((arg1)->renew);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnRegStartedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnRegStartedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnRegStartedParam *)new pj::OnRegStartedParam();
  *(pj::OnRegStartedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnRegStartedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnRegStartedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1expiration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->expiration = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnRegStateParam_1expiration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  result = (unsigned int) ((arg1)->expiration);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnRegStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnRegStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnRegStateParam *)new pj::OnRegStateParam();
  *(pj::OnRegStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnRegStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnRegStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1srvPres_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1srvPres_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (void *) ((arg1)->srvPres);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1fromUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1fromUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIncomingSubscribeParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnIncomingSubscribeParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnIncomingSubscribeParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnIncomingSubscribeParam *)new pj::OnIncomingSubscribeParam();
  *(pj::OnIncomingSubscribeParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnIncomingSubscribeParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnIncomingSubscribeParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1fromUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1fromUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1toUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1toUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1contactUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1contactUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1contentType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1contentType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1msgBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1msgBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnInstantMessageParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnInstantMessageParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnInstantMessageParam *)new pj::OnInstantMessageParam();
  *(pj::OnInstantMessageParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnInstantMessageParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnInstantMessageParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pj::Token) ((arg1)->userData);
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1toUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1toUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1msgBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1msgBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnInstantMessageStatusParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnInstantMessageStatusParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnInstantMessageStatusParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnInstantMessageStatusParam *)new pj::OnInstantMessageStatusParam();
  *(pj::OnInstantMessageStatusParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnInstantMessageStatusParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnInstantMessageStatusParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1fromUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1fromUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1toUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1toUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1contactUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1contactUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1isTyping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1isTyping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTypingIndicationParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnTypingIndicationParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnTypingIndicationParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnTypingIndicationParam *)new pj::OnTypingIndicationParam();
  *(pj::OnTypingIndicationParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnTypingIndicationParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnTypingIndicationParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMwiInfoParam_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnMwiInfoParam **)&jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMwiInfoParam_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnMwiInfoParam **)&jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMwiInfoParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnMwiInfoParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMwiInfoParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnMwiInfoParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnMwiInfoParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnMwiInfoParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnMwiInfoParam *)new pj::OnMwiInfoParam();
  *(pj::OnMwiInfoParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnMwiInfoParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnMwiInfoParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1srvPres_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1srvPres_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (void *) ((arg1)->srvPres);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1stateStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->stateStr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1stateStr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->stateStr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1withBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->withBody = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1withBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (bool) ((arg1)->withBody);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PresNotifyParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1PresNotifyParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::PresNotifyParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::PresNotifyParam *)new pj::PresNotifyParam();
  *(pj::PresNotifyParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1PresNotifyParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::PresNotifyParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_FindBuddyMatch_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::FindBuddyMatch **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::Buddy **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Buddy const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_FindBuddyMatch_1matchSwigExplicitFindBuddyMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::FindBuddyMatch **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::Buddy **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Buddy const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->pj::FindBuddyMatch::match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1FindBuddyMatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::FindBuddyMatch **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1FindBuddyMatch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::FindBuddyMatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::FindBuddyMatch *)new SwigDirector_FindBuddyMatch(jenv);
  *(pj::FindBuddyMatch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_FindBuddyMatch_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::FindBuddyMatch *obj = *((pj::FindBuddyMatch **)&objarg);
  (void)jcls;
  SwigDirector_FindBuddyMatch *director = static_cast<SwigDirector_FindBuddyMatch *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_FindBuddyMatch_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::FindBuddyMatch *obj = *((pj::FindBuddyMatch **)&objarg);
  SwigDirector_FindBuddyMatch *director = dynamic_cast<SwigDirector_FindBuddyMatch *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Account(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Account *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::Account *)new SwigDirector_Account(jenv);
  *(pj::Account **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Account(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Account **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::AccountConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AccountConfig const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::AccountConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AccountConfig const & reference is null");
    return ;
  } 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1modify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::AccountConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AccountConfig const & reference is null");
    return ;
  } 
  try {
    (arg1)->modify((pj::AccountConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  result = (bool)((pj::Account const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1setDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  try {
    (arg1)->setDefault();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1isDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  result = (bool)((pj::Account const *)arg1)->isDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  result = (int)((pj::Account const *)arg1)->getId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1lookup(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::Account *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (pj::Account *)pj::Account::lookup(arg1);
  *(pj::Account **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  try {
    result = ((pj::Account const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AccountInfo **)&jresult = new pj::AccountInfo((const pj::AccountInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1setRegistration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setRegistration(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1setOnlineStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresenceStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::PresenceStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PresenceStatus const & reference is null");
    return ;
  } 
  try {
    (arg1)->setOnlineStatus((pj::PresenceStatus const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1setTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::TransportId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->setTransport(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1presNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresNotifyParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::PresNotifyParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::PresNotifyParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->presNotify((pj::PresNotifyParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1enumBuddies2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::BuddyVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  try {
    result = ((pj::Account const *)arg1)->enumBuddies2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::BuddyVector2 **)&jresult = new pj::BuddyVector2((const pj::BuddyVector2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1findBuddy2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::Buddy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::Account const *)arg1)->findBuddy2(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::Buddy **)&jresult = new pj::Buddy((const pj::Buddy &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onIncomingCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnIncomingCallParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIncomingCallParam & reference is null");
    return ;
  } 
  (arg1)->onIncomingCall(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onIncomingCallSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnIncomingCallParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIncomingCallParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onIncomingCall(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onRegStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnRegStartedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnRegStartedParam & reference is null");
    return ;
  } 
  (arg1)->onRegStarted(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onRegStartedSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnRegStartedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnRegStartedParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onRegStarted(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onRegState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnRegStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnRegStateParam & reference is null");
    return ;
  } 
  (arg1)->onRegState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onRegStateSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnRegStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnRegStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onRegState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onIncomingSubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnIncomingSubscribeParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIncomingSubscribeParam & reference is null");
    return ;
  } 
  (arg1)->onIncomingSubscribe(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onIncomingSubscribeSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnIncomingSubscribeParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIncomingSubscribeParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onIncomingSubscribe(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onInstantMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageParam & reference is null");
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onInstantMessageSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onInstantMessage(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onInstantMessageStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnInstantMessageStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageStatusParam & reference is null");
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onInstantMessageStatusSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnInstantMessageStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageStatusParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onTypingIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTypingIndicationParam & reference is null");
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onTypingIndicationSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTypingIndicationParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onTypingIndication(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onMwiInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnMwiInfoParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnMwiInfoParam & reference is null");
    return ;
  } 
  (arg1)->onMwiInfo(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1onMwiInfoSwigExplicitAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Account **)&jarg1; 
  arg2 = *(pj::OnMwiInfoParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnMwiInfoParam & reference is null");
    return ;
  } 
  (arg1)->pj::Account::onMwiInfo(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::Account *obj = *((pj::Account **)&objarg);
  (void)jcls;
  SwigDirector_Account *director = static_cast<SwigDirector_Account *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Account_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::Account *obj = *((pj::Account **)&objarg);
  SwigDirector_Account *director = dynamic_cast<SwigDirector_Account *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  result = (int) ((arg1)->max);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  result = (int) ((arg1)->min);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1last_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1last_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  result = (int) ((arg1)->last);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1mean_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mean = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MathStat_1mean_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MathStat **)&jarg1; 
  result = (int) ((arg1)->mean);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MathStat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MathStat *)new pj::MathStat();
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MathStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MathStat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LossType_1burst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LossType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LossType_1burst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LossType **)&jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LossType_1random_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LossType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->random = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LossType_1random_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LossType **)&jarg1; 
  result = (unsigned int) ((arg1)->random);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1LossType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::LossType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::LossType *)new pj::LossType();
  *(pj::LossType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1LossType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::LossType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1update_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->update = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1update_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->update);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1updateCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->updateCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1updateCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->updateCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1pkt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pkt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1pkt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->pkt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1discard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1discard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1loss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->loss = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1loss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->loss);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1reorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reorder = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1reorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->reorder);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1dup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->dup = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1dup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (unsigned int) ((arg1)->dup);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1lossPeriodUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = *(pj::MathStat **)&jarg2; 
  if (arg1) (arg1)->lossPeriodUsec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1lossPeriodUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (pj::MathStat *)& ((arg1)->lossPeriodUsec);
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1lossType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *arg2 = (pj::LossType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = *(pj::LossType **)&jarg2; 
  if (arg1) (arg1)->lossType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1lossType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (pj::LossType *)& ((arg1)->lossType);
  *(pj::LossType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1jitterUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  arg2 = *(pj::MathStat **)&jarg2; 
  if (arg1) (arg1)->jitterUsec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStreamStat_1jitterUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  result = (pj::MathStat *)& ((arg1)->jitterUsec);
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpStreamStat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RtcpStreamStat *)new pj::RtcpStreamStat();
  *(pj::RtcpStreamStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpStreamStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RtcpStreamStat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1cname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->cname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1cname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->cname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1email_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->email = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1email_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->email);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1phone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->phone = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1phone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->phone);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1loc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->loc = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1loc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->loc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1tool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->tool = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1tool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->tool);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1note_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpSdes_1note_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpSdes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RtcpSdes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RtcpSdes *)new pj::RtcpSdes();
  *(pj::RtcpSdes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpSdes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RtcpSdes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->start);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1txStat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::RtcpStreamStat **)&jarg2; 
  if (arg1) (arg1)->txStat = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1txStat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->txStat);
  *(pj::RtcpStreamStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxStat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::RtcpStreamStat **)&jarg2; 
  if (arg1) (arg1)->rxStat = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxStat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->rxStat);
  *(pj::RtcpStreamStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rttUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::MathStat **)&jarg2; 
  if (arg1) (arg1)->rttUsec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rttUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::MathStat *)& ((arg1)->rttUsec);
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rtpTxLastTs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastTs = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rtpTxLastTs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj_uint32_t) ((arg1)->rtpTxLastTs);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rtpTxLastSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = (pj_uint16_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastSeq = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rtpTxLastSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj_uint16_t) ((arg1)->rtpTxLastSeq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxIpdvUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::MathStat **)&jarg2; 
  if (arg1) (arg1)->rxIpdvUsec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxIpdvUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxIpdvUsec);
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxRawJitterUsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::MathStat **)&jarg2; 
  if (arg1) (arg1)->rxRawJitterUsec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1rxRawJitterUsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxRawJitterUsec);
  *(pj::MathStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1peerSdes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *arg2 = (pj::RtcpSdes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  arg2 = *(pj::RtcpSdes **)&jarg2; 
  if (arg1) (arg1)->peerSdes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpStat_1peerSdes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  result = (pj::RtcpSdes *)& ((arg1)->peerSdes);
  *(pj::RtcpSdes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RtcpStat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RtcpStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RtcpStat *)new pj::RtcpStat();
  *(pj::RtcpStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RtcpStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RtcpStat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1frameSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1frameSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->frameSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1minPrefetch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minPrefetch = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1minPrefetch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->minPrefetch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1maxPrefetch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxPrefetch = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1maxPrefetch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->maxPrefetch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1burst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1burst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1prefetch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->prefetch = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1prefetch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->prefetch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1avgDelayMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgDelayMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1avgDelayMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->avgDelayMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1minDelayMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minDelayMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1minDelayMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->minDelayMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1maxDelayMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxDelayMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1maxDelayMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->maxDelayMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1devDelayMsec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->devDelayMsec = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1devDelayMsec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->devDelayMsec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1avgBurst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBurst = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1avgBurst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->avgBurst);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1lost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->lost = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1lost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->lost);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1discard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1discard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1empty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->empty = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JbufState_1empty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JbufState **)&jarg1; 
  result = (unsigned int) ((arg1)->empty);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1JbufState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::JbufState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::JbufState *)new pj::JbufState();
  *(pj::JbufState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1JbufState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::JbufState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SdpSession_1wholeSdp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SdpSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->wholeSdp = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SdpSession_1wholeSdp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SdpSession **)&jarg1; 
  result = (pj::string *) & ((arg1)->wholeSdp);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SdpSession_1pjSdpSession_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SdpSession **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->pjSdpSession = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SdpSession_1pjSdpSession_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SdpSession **)&jarg1; 
  result = (void *) ((arg1)->pjSdpSession);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SdpSession(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SdpSession *)new pj::SdpSession();
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SdpSession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SdpSession **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1localRtpName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localRtpName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1localRtpName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtpName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1localRtcpName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localRtcpName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1localRtcpName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtcpName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1srcRtpName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->srcRtpName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1srcRtpName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtpName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1srcRtcpName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->srcRtcpName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaTransportInfo_1srcRtcpName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtcpName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaTransportInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaTransportInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaTransportInfo *)new pj::MediaTransportInfo();
  *(pj::MediaTransportInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaTransportInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaTransportInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  result = (unsigned int) ((arg1)->flag);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1reqKeyframeMethod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reqKeyframeMethod = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1reqKeyframeMethod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  result = (unsigned int) ((arg1)->reqKeyframeMethod);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1audioCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1audioCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  result = (unsigned int) ((arg1)->audioCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1videoCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->videoCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1videoCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  result = (unsigned int) ((arg1)->videoCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallSetting_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (pj::CallSetting *)new pj::CallSetting(arg1);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallSetting_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallSetting *)new pj::CallSetting();
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSetting_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSetting **)&jarg1; 
  result = (bool)((pj::CallSetting const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->index);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (pjsua_call_media_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pjsua_call_media_status) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1audioConfSlot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audioConfSlot = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1audioConfSlot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (int) ((arg1)->audioConfSlot);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoIncomingWindowId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (pjsua_vid_win_id)jarg2; 
  if (arg1) (arg1)->videoIncomingWindowId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoIncomingWindowId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pjsua_vid_win_id) ((arg1)->videoIncomingWindowId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoWindow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *arg2 = (pj::VideoWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = *(pj::VideoWindow **)&jarg2; 
  if (arg1) (arg1)->videoWindow = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoWindow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pj::VideoWindow *)& ((arg1)->videoWindow);
  *(pj::VideoWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoCapDev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->videoCapDev = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallMediaInfo_1videoCapDev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->videoCapDev);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallMediaInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallMediaInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallMediaInfo *)new pj::CallMediaInfo();
  *(pj::CallMediaInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallMediaInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallMediaInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pjsua_call_id) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1role_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1role_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1accId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1accId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pjsua_acc_id) ((arg1)->accId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1localUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1localUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->localUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1localContact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localContact = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1localContact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->localContact);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remoteUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remoteUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->remoteUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remoteContact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteContact = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remoteContact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->remoteContact);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1callIdString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->callIdString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1callIdString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->callIdString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1setting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1setting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->setting);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (pjsip_inv_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pjsip_inv_state) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1stateText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->stateText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1stateText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->stateText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1lastStatusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->lastStatusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1lastStatusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->lastStatusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1lastReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->lastReason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1lastReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->lastReason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1media_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = *(pj::CallMediaInfoVector **)&jarg2; 
  if (arg1) (arg1)->media = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1media_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->media);
  *(pj::CallMediaInfoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1provMedia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = *(pj::CallMediaInfoVector **)&jarg2; 
  if (arg1) (arg1)->provMedia = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1provMedia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->provMedia);
  *(pj::CallMediaInfoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1connectDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->connectDuration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1connectDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->connectDuration);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1totalDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->totalDuration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1totalDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->totalDuration);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remOfferer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->remOfferer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remOfferer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (bool) ((arg1)->remOfferer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remAudioCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remAudioCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remAudioCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->remAudioCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remVideoCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remVideoCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallInfo_1remVideoCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->remVideoCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallInfo *)new pj::CallInfo();
  *(pj::CallInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1proto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (pjmedia_tp_proto)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1proto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pjmedia_tp_proto) ((arg1)->proto);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1remoteRtpAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteRtpAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1remoteRtpAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtpAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1remoteRtcpAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteRtcpAddress = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1remoteRtcpAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtcpAddress);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1txPt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txPt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1txPt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->txPt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1rxPt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxPt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1rxPt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->rxPt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1codecName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->codecName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1codecName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->codecName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1codecClockRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->codecClockRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1codecClockRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->codecClockRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1audCodecParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *arg2 = (pj::CodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = *(pj::CodecParam **)&jarg2; 
  if (arg1) (arg1)->audCodecParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1audCodecParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pj::CodecParam *)& ((arg1)->audCodecParam);
  *(pj::CodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1vidCodecParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *arg2 = (pj::VidCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  arg2 = *(pj::VidCodecParam **)&jarg2; 
  if (arg1) (arg1)->vidCodecParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamInfo_1vidCodecParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  result = (pj::VidCodecParam *)& ((arg1)->vidCodecParam);
  *(pj::VidCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1StreamInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::StreamInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::StreamInfo *)new pj::StreamInfo();
  *(pj::StreamInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1StreamInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::StreamInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamStat_1rtcp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *arg2 = (pj::RtcpStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::StreamStat **)&jarg1; 
  arg2 = *(pj::RtcpStat **)&jarg2; 
  if (arg1) (arg1)->rtcp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamStat_1rtcp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamStat **)&jarg1; 
  result = (pj::RtcpStat *)& ((arg1)->rtcp);
  *(pj::RtcpStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamStat_1jbuf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *arg2 = (pj::JbufState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::StreamStat **)&jarg1; 
  arg2 = *(pj::JbufState **)&jarg2; 
  if (arg1) (arg1)->jbuf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_StreamStat_1jbuf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::StreamStat **)&jarg1; 
  result = (pj::JbufState *)& ((arg1)->jbuf);
  *(pj::JbufState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1StreamStat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::StreamStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::StreamStat *)new pj::StreamStat();
  *(pj::StreamStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1StreamStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::StreamStat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallStateParam_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallStateParam **)&jarg1; 
  arg2 = *(pj::SipEvent **)&jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallStateParam_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallStateParam **)&jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  *(pj::SipEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallStateParam *)new pj::OnCallStateParam();
  *(pj::OnCallStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTsxStateParam_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallTsxStateParam **)&jarg1; 
  arg2 = *(pj::SipEvent **)&jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTsxStateParam_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTsxStateParam **)&jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  *(pj::SipEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallTsxStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallTsxStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallTsxStateParam *)new pj::OnCallTsxStateParam();
  *(pj::OnCallTsxStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallTsxStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallTsxStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallMediaStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallMediaStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallMediaStateParam *)new pj::OnCallMediaStateParam();
  *(pj::OnCallMediaStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallMediaStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallMediaStateParam *arg1 = (pj::OnCallMediaStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallMediaStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallSdpCreatedParam_1sdp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallSdpCreatedParam **)&jarg1; 
  arg2 = *(pj::SdpSession **)&jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallSdpCreatedParam_1sdp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallSdpCreatedParam **)&jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallSdpCreatedParam_1remSdp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallSdpCreatedParam **)&jarg1; 
  arg2 = *(pj::SdpSession **)&jarg2; 
  if (arg1) (arg1)->remSdp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallSdpCreatedParam_1remSdp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallSdpCreatedParam **)&jarg1; 
  result = (pj::SdpSession *)& ((arg1)->remSdp);
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallSdpCreatedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallSdpCreatedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallSdpCreatedParam *)new pj::OnCallSdpCreatedParam();
  *(pj::OnCallSdpCreatedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallSdpCreatedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallSdpCreatedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1stream_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  arg2 = *(pj::MediaStream *)&jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1stream_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  *(pj::MediaStream *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1streamIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1streamIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1destroyPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->destroyPort = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1destroyPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  result = (bool) ((arg1)->destroyPort);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1pPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort arg2 = (pj::MediaPort) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  arg2 = *(pj::MediaPort *)&jarg2; 
  if (arg1) (arg1)->pPort = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamCreatedParam_1pPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  result = (pj::MediaPort) ((arg1)->pPort);
  *(pj::MediaPort *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnStreamCreatedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnStreamCreatedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnStreamCreatedParam *)new pj::OnStreamCreatedParam();
  *(pj::OnStreamCreatedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnStreamCreatedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnStreamCreatedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamDestroyedParam_1stream_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamDestroyedParam **)&jarg1; 
  arg2 = *(pj::MediaStream *)&jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamDestroyedParam_1stream_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamDestroyedParam **)&jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  *(pj::MediaStream *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamDestroyedParam_1streamIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamDestroyedParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnStreamDestroyedParam_1streamIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnStreamDestroyedParam **)&jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnStreamDestroyedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnStreamDestroyedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnStreamDestroyedParam *)new pj::OnStreamDestroyedParam();
  *(pj::OnStreamDestroyedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnStreamDestroyedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnStreamDestroyedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1digit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1digit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnDtmfDigitParam_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnDtmfDigitParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnDtmfDigitParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnDtmfDigitParam *)new pj::OnDtmfDigitParam();
  *(pj::OnDtmfDigitParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnDtmfDigitParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnDtmfDigitParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1dstUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dstUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1dstUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->dstUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1newCall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::Call *arg2 = (pj::Call *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  arg2 = *(pj::Call **)&jarg2; 
  if (arg1) (arg1)->newCall = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferRequestParam_1newCall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::Call *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  result = (pj::Call *) ((arg1)->newCall);
  *(pj::Call **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallTransferRequestParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallTransferRequestParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallTransferRequestParam *)new pj::OnCallTransferRequestParam();
  *(pj::OnCallTransferRequestParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallTransferRequestParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallTransferRequestParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1finalNotify_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->finalNotify = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1finalNotify_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  result = (bool) ((arg1)->finalNotify);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1cont_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cont = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTransferStatusParam_1cont_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  result = (bool) ((arg1)->cont);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallTransferStatusParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallTransferStatusParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallTransferStatusParam *)new pj::OnCallTransferStatusParam();
  *(pj::OnCallTransferStatusParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallTransferStatusParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallTransferStatusParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplaceRequestParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallReplaceRequestParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallReplaceRequestParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallReplaceRequestParam *)new pj::OnCallReplaceRequestParam();
  *(pj::OnCallReplaceRequestParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallReplaceRequestParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallReplaceRequestParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplacedParam_1newCallId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplacedParam **)&jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->newCallId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplacedParam_1newCallId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplacedParam **)&jarg1; 
  result = (pjsua_call_id) ((arg1)->newCallId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplacedParam_1newCall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pj::Call *arg2 = (pj::Call *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallReplacedParam **)&jarg1; 
  arg2 = *(pj::Call **)&jarg2; 
  if (arg1) (arg1)->newCall = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallReplacedParam_1newCall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pj::Call *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallReplacedParam **)&jarg1; 
  result = (pj::Call *) ((arg1)->newCall);
  *(pj::Call **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallReplacedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallReplacedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallReplacedParam *)new pj::OnCallReplacedParam();
  *(pj::OnCallReplacedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallReplacedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallReplacedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1offer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  arg2 = *(pj::SdpSession **)&jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1offer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxOfferParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallRxOfferParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallRxOfferParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallRxOfferParam *)new pj::OnCallRxOfferParam();
  *(pj::OnCallRxOfferParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallRxOfferParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallRxOfferParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1offer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  arg2 = *(pj::SdpSession **)&jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1offer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1isAsync_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAsync = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1isAsync_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  result = (bool) ((arg1)->isAsync);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRxReinviteParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallRxReinviteParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallRxReinviteParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallRxReinviteParam *)new pj::OnCallRxReinviteParam();
  *(pj::OnCallRxReinviteParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallRxReinviteParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallRxReinviteParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTxOfferParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallTxOfferParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallTxOfferParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallTxOfferParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallTxOfferParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallTxOfferParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallTxOfferParam *)new pj::OnCallTxOfferParam();
  *(pj::OnCallTxOfferParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallTxOfferParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallTxOfferParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRedirectedParam_1targetUri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRedirectedParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRedirectedParam_1targetUri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRedirectedParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRedirectedParam_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallRedirectedParam **)&jarg1; 
  arg2 = *(pj::SipEvent **)&jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallRedirectedParam_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallRedirectedParam **)&jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  *(pj::SipEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallRedirectedParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallRedirectedParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallRedirectedParam *)new pj::OnCallRedirectedParam();
  *(pj::OnCallRedirectedParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallRedirectedParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallRedirectedParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaEventParam_1medIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaEventParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaEventParam_1medIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaEventParam **)&jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaEventParam_1ev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCallMediaEventParam **)&jarg1; 
  arg2 = *(pj::MediaEvent **)&jarg2; 
  if (arg1) (arg1)->ev = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaEventParam_1ev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaEventParam **)&jarg1; 
  result = (pj::MediaEvent *)& ((arg1)->ev);
  *(pj::MediaEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallMediaEventParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallMediaEventParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallMediaEventParam *)new pj::OnCallMediaEventParam();
  *(pj::OnCallMediaEventParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallMediaEventParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallMediaEventParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1medIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1medIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  arg2 = (pjsua_med_tp_st)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  result = (pjsua_med_tp_st) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1sipErrorCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipErrorCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCallMediaTransportStateParam_1sipErrorCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  result = (int) ((arg1)->sipErrorCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCallMediaTransportStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCallMediaTransportStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCallMediaTransportStateParam *)new pj::OnCallMediaTransportStateParam();
  *(pj::OnCallMediaTransportStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCallMediaTransportStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCallMediaTransportStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1mediaIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1mediaIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1mediaTp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport arg2 = (pj::MediaTransport) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  arg2 = *(pj::MediaTransport *)&jarg2; 
  if (arg1) (arg1)->mediaTp = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1mediaTp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  result = (pj::MediaTransport) ((arg1)->mediaTp);
  *(pj::MediaTransport *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportParam_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCreateMediaTransportParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCreateMediaTransportParam *)new pj::OnCreateMediaTransportParam();
  *(pj::OnCreateMediaTransportParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCreateMediaTransportParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCreateMediaTransportParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1mediaIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1mediaIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1srtpUse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1srtpUse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1cryptos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pj::SrtpCryptoVector *arg2 = (pj::SrtpCryptoVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  arg2 = *(pj::SrtpCryptoVector **)&jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnCreateMediaTransportSrtpParam_1cryptos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pj::SrtpCryptoVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  result = (pj::SrtpCryptoVector *)& ((arg1)->cryptos);
  *(pj::SrtpCryptoVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnCreateMediaTransportSrtpParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnCreateMediaTransportSrtpParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnCreateMediaTransportSrtpParam *)new pj::OnCreateMediaTransportSrtpParam();
  *(pj::OnCreateMediaTransportSrtpParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnCreateMediaTransportSrtpParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  arg2 = *(pj::CallSetting **)&jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  *(pj::CallSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (unsigned int) ((arg1)->options);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1sdp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  arg2 = *(pj::SdpSession **)&jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallOpParam_1sdp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  *(pj::SdpSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallOpParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  pj::CallOpParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (pj::CallOpParam *)new pj::CallOpParam(arg1);
  *(pj::CallOpParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallOpParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallOpParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallOpParam *)new pj::CallOpParam();
  *(pj::CallOpParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallOpParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallOpParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendRequestParam_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendRequestParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendRequestParam_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendRequestParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendRequestParam_1txOption_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::CallSendRequestParam **)&jarg1; 
  arg2 = *(pj::SipTxOption **)&jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendRequestParam_1txOption_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendRequestParam **)&jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  *(pj::SipTxOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallSendRequestParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallSendRequestParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallSendRequestParam *)new pj::CallSendRequestParam();
  *(pj::CallSendRequestParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallSendRequestParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallSendRequestParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1medIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1medIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  result = (int) ((arg1)->medIdx);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1capDev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->capDev = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallVidSetStreamParam_1capDev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->capDev);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallVidSetStreamParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallVidSetStreamParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallVidSetStreamParam *)new pj::CallVidSetStreamParam();
  *(pj::CallVidSetStreamParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallVidSetStreamParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallVidSetStreamParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1digits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->digits = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_CallSendDtmfParam_1digits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->digits);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1CallSendDtmfParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::CallSendDtmfParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::CallSendDtmfParam *)new pj::CallSendDtmfParam();
  *(pj::CallSendDtmfParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1CallSendDtmfParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::CallSendDtmfParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Call_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::Account *arg1 = 0 ;
  int arg2 ;
  pj::Call *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Account & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (pj::Call *)new SwigDirector_Call(jenv,*arg1,arg2);
  *(pj::Call **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Call_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Account *arg1 = 0 ;
  pj::Call *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Account **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Account & reference is null");
    return 0;
  } 
  result = (pj::Call *)new SwigDirector_Call(jenv,*arg1);
  *(pj::Call **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Call(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Call **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  try {
    result = ((pj::Call const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::CallInfo **)&jresult = new pj::CallInfo((const pj::CallInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  result = (bool)((pj::Call const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  result = (int)((pj::Call const *)arg1)->getId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1lookup(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  pj::Call *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (pj::Call *)pj::Call::lookup(arg1);
  *(pj::Call **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1hasMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  result = (bool)((pj::Call const *)arg1)->hasMedia();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::Media *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pj::Media *)((pj::Call const *)arg1)->getMedia(arg2);
  *(pj::Media **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getAudioMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::AudioMedia result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getAudioMedia(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioMedia **)&jresult = new pj::AudioMedia((const pj::AudioMedia &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getEncodingVideoMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::VideoMedia result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getEncodingVideoMedia(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoMedia **)&jresult = new pj::VideoMedia((const pj::VideoMedia &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getDecodingVideoMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::VideoMedia result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getDecodingVideoMedia(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoMedia **)&jresult = new pj::VideoMedia((const pj::VideoMedia &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1remoteHasCap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  pjsip_dialog_cap_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  pj::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (pjsip_dialog_cap_status)((pj::Call const *)arg1)->remoteHasCap(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  (arg1)->setUserData(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  result = (pj::Token)((pj::Call const *)arg1)->getUserData();
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getRemNatType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj_stun_nat_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->getRemNatType();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1makeCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Call **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::CallOpParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->makeCall((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1answer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->answer((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1hangup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->hangup((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1setHold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->setHold((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1reinvite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->reinvite((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallOpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->update((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1xfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Call **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::CallOpParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->xfer((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1xferReplaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Call *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::Call **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::Call const & reference is null");
    return ;
  } 
  arg3 = *(pj::CallOpParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallOpParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->xferReplaces((pj::Call const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1processRedirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsip_redirect_op arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (pjsip_redirect_op)jarg2; 
  try {
    (arg1)->processRedirect(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1dialDtmf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->dialDtmf((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1sendDtmf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendDtmfParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallSendDtmfParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallSendDtmfParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendDtmf((pj::CallSendDtmfParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1sendInstantMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::SendInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SendInstantMessageParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1sendTypingIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::SendTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::SendTypingIndicationParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1sendRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendRequestParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::CallSendRequestParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallSendRequestParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->sendRequest((pj::CallSendRequestParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool arg2 ;
  pj::string arg3 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (arg1)->dump(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1vidGetStreamIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  result = (int)((pj::Call const *)arg1)->vidGetStreamIdx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1vidStreamIsRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pjmedia_dir arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pjmedia_dir)jarg3; 
  result = (bool)((pj::Call const *)arg1)->vidStreamIsRunning(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1vidSetStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsua_call_vid_strm_op arg2 ;
  pj::CallVidSetStreamParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (pjsua_call_vid_strm_op)jarg2; 
  arg3 = *(pj::CallVidSetStreamParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::CallVidSetStreamParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->vidSetStream(arg2,(pj::CallVidSetStreamParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getStreamInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamInfo(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StreamInfo **)&jresult = new pj::StreamInfo((const pj::StreamInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getStreamStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamStat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamStat(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StreamStat **)&jresult = new pj::StreamStat((const pj::StreamStat &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1getMedTransportInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::MediaTransportInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getMedTransportInfo(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::MediaTransportInfo **)&jresult = new pj::MediaTransportInfo((const pj::MediaTransportInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1processMediaUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaStateParam & reference is null");
    return ;
  } 
  (arg1)->processMediaUpdate(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1processStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallStateParam & reference is null");
    return ;
  } 
  (arg1)->processStateChange(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallStateParam & reference is null");
    return ;
  } 
  (arg1)->onCallState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallStateSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTsxState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTsxStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTsxStateParam & reference is null");
    return ;
  } 
  (arg1)->onCallTsxState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTsxStateSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTsxStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTsxStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallTsxState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaStateParam & reference is null");
    return ;
  } 
  (arg1)->onCallMediaState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaStateSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallMediaState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallSdpCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallSdpCreatedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallSdpCreatedParam & reference is null");
    return ;
  } 
  (arg1)->onCallSdpCreated(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallSdpCreatedSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallSdpCreatedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallSdpCreatedParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallSdpCreated(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onStreamCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnStreamCreatedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnStreamCreatedParam & reference is null");
    return ;
  } 
  (arg1)->onStreamCreated(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onStreamCreatedSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnStreamCreatedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnStreamCreatedParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onStreamCreated(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onStreamDestroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnStreamDestroyedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnStreamDestroyedParam & reference is null");
    return ;
  } 
  (arg1)->onStreamDestroyed(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onStreamDestroyedSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnStreamDestroyedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnStreamDestroyedParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onStreamDestroyed(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onDtmfDigit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnDtmfDigitParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnDtmfDigitParam & reference is null");
    return ;
  } 
  (arg1)->onDtmfDigit(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onDtmfDigitSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnDtmfDigitParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnDtmfDigitParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onDtmfDigit(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTransferRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTransferRequestParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTransferRequestParam & reference is null");
    return ;
  } 
  (arg1)->onCallTransferRequest(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTransferRequestSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTransferRequestParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTransferRequestParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallTransferRequest(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTransferStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTransferStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTransferStatusParam & reference is null");
    return ;
  } 
  (arg1)->onCallTransferStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTransferStatusSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTransferStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTransferStatusParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallTransferStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallReplaceRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallReplaceRequestParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallReplaceRequestParam & reference is null");
    return ;
  } 
  (arg1)->onCallReplaceRequest(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallReplaceRequestSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallReplaceRequestParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallReplaceRequestParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallReplaceRequest(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallReplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallReplacedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallReplacedParam & reference is null");
    return ;
  } 
  (arg1)->onCallReplaced(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallReplacedSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallReplacedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallReplacedParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallReplaced(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRxOffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRxOfferParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRxOfferParam & reference is null");
    return ;
  } 
  (arg1)->onCallRxOffer(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRxOfferSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRxOfferParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRxOfferParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallRxOffer(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRxReinvite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRxReinviteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRxReinviteParam & reference is null");
    return ;
  } 
  (arg1)->onCallRxReinvite(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRxReinviteSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRxReinviteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRxReinviteParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallRxReinvite(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTxOffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTxOfferParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTxOfferParam & reference is null");
    return ;
  } 
  (arg1)->onCallTxOffer(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallTxOfferSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallTxOfferParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallTxOfferParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallTxOffer(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onInstantMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageParam & reference is null");
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onInstantMessageSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnInstantMessageParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onInstantMessage(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onInstantMessageStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnInstantMessageStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageStatusParam & reference is null");
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onInstantMessageStatusSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnInstantMessageStatusParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnInstantMessageStatusParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onTypingIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTypingIndicationParam & reference is null");
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onTypingIndicationSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnTypingIndicationParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTypingIndicationParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onTypingIndication(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRedirected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRedirectedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRedirectedParam & reference is null");
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->onCallRedirected(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallRedirectedSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallRedirectedParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallRedirectedParam & reference is null");
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->pj::Call::onCallRedirected(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaTransportState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaTransportStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaTransportStateParam & reference is null");
    return ;
  } 
  (arg1)->onCallMediaTransportState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaTransportStateSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaTransportStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaTransportStateParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallMediaTransportState(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaEventParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaEventParam & reference is null");
    return ;
  } 
  (arg1)->onCallMediaEvent(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCallMediaEventSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCallMediaEventParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCallMediaEventParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCallMediaEvent(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCreateMediaTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCreateMediaTransportParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCreateMediaTransportParam & reference is null");
    return ;
  } 
  (arg1)->onCreateMediaTransport(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCreateMediaTransportSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCreateMediaTransportParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCreateMediaTransportParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransport(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCreateMediaTransportSrtp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCreateMediaTransportSrtpParam & reference is null");
    return ;
  } 
  (arg1)->onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1onCreateMediaTransportSrtpSwigExplicitCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Call **)&jarg1; 
  arg2 = *(pj::OnCreateMediaTransportSrtpParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnCreateMediaTransportSrtpParam & reference is null");
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::Call *obj = *((pj::Call **)&objarg);
  (void)jcls;
  SwigDirector_Call *director = static_cast<SwigDirector_Call *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Call_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::Call *obj = *((pj::Call **)&objarg);
  SwigDirector_Call *director = dynamic_cast<SwigDirector_Call *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1JsonDocument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::JsonDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::JsonDocument *)new pj::JsonDocument();
  *(pj::JsonDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1JsonDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1loadFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1loadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1saveFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1saveString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  try {
    result = (arg1)->saveString();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1getRootContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::JsonDocument **)&jarg1; 
  result = (pj::ContainerNode *) &((pj::JsonDocument const *)arg1)->getRootContainer();
  *(pj::ContainerNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1natType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  arg2 = (pj_stun_nat_type)jarg2; 
  if (arg1) (arg1)->natType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1natType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  result = (pj_stun_nat_type) ((arg1)->natType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1natTypeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->natTypeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatDetectionCompleteParam_1natTypeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->natTypeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnNatDetectionCompleteParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnNatDetectionCompleteParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnNatDetectionCompleteParam *)new pj::OnNatDetectionCompleteParam();
  *(pj::OnNatDetectionCompleteParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnNatDetectionCompleteParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnNatDetectionCompleteParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  result = (pj::Token) ((arg1)->userData);
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->addr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnNatCheckStunServersCompleteParam_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->addr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnNatCheckStunServersCompleteParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnNatCheckStunServersCompleteParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnNatCheckStunServersCompleteParam *)new pj::OnNatCheckStunServersCompleteParam();
  *(pj::OnNatCheckStunServersCompleteParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnNatCheckStunServersCompleteParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTimerParam_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTimerParam **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTimerParam_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTimerParam **)&jarg1; 
  result = (pj::Token) ((arg1)->userData);
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTimerParam_1msecDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTimerParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecDelay = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTimerParam_1msecDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTimerParam **)&jarg1; 
  result = (unsigned int) ((arg1)->msecDelay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnTimerParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnTimerParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnTimerParam *)new pj::OnTimerParam();
  *(pj::OnTimerParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnTimerParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnTimerParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertName_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertName **)&jarg1; 
  arg2 = (pj_ssl_cert_name_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertName_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertName **)&jarg1; 
  result = (pj_ssl_cert_name_type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertName_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertName **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertName_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertName **)&jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SslCertName(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SslCertName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SslCertName *)new pj::SslCertName();
  *(pj::SslCertName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SslCertName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SslCertName **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->version);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1serialNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->serialNo;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1serialNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->serialNo);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectCn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->subjectCn = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectCn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->subjectCn);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->subjectInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->subjectInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1issuerCn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->issuerCn = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1issuerCn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->issuerCn);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1issuerInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->issuerInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1issuerInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->issuerInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->validityStart = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityStart);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = *(pj::TimeVal **)&jarg2; 
  if (arg1) (arg1)->validityEnd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityEnd);
  *(pj::TimeVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityGmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->validityGmt = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1validityGmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (bool) ((arg1)->validityGmt);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectAltName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::SslCertNameVector *arg2 = (pj::SslCertNameVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  arg2 = *(pj::SslCertNameVector **)&jarg2; 
  if (arg1) (arg1)->subjectAltName = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1subjectAltName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::SslCertNameVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::SslCertNameVector *)& ((arg1)->subjectAltName);
  *(pj::SslCertNameVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1raw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->raw = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1raw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->raw);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1SslCertInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::SslCertInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::SslCertInfo *)new pj::SslCertInfo();
  *(pj::SslCertInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SslCertInfo_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  result = (bool)((pj::SslCertInfo const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1SslCertInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::SslCertInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1established_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->established = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1established_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (bool) ((arg1)->established);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1protocol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->protocol = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1protocol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->protocol);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1cipher_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = (pj_ssl_cipher)jarg2; 
  if (arg1) (arg1)->cipher = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1cipher_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj_ssl_cipher) ((arg1)->cipher);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1cipherName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->cipherName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1cipherName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::string *) & ((arg1)->cipherName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1localAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->localAddr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1localAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1remoteAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::SocketAddress arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteAddr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1remoteAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteAddr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1localCertInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = *(pj::SslCertInfo **)&jarg2; 
  if (arg1) (arg1)->localCertInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1localCertInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->localCertInfo);
  *(pj::SslCertInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1remoteCertInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = *(pj::SslCertInfo **)&jarg2; 
  if (arg1) (arg1)->remoteCertInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1remoteCertInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->remoteCertInfo);
  *(pj::SslCertInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1verifyStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->verifyStatus = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1verifyStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->verifyStatus);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1verifyMsgs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2; 
  if (arg1) (arg1)->verifyMsgs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1verifyMsgs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (pj::StringVector *)& ((arg1)->verifyMsgs);
  *(pj::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1TlsInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::TlsInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::TlsInfo *)new pj::TlsInfo();
  *(pj::TlsInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsInfo_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  result = (bool)((pj::TlsInfo const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1TlsInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::TlsInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1hnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  arg2 = *(pj::TransportHandle *)&jarg2; 
  if (arg1) (arg1)->hnd = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1hnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  result = (pj::TransportHandle) ((arg1)->hnd);
  *(pj::TransportHandle *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  arg2 = (pjsip_transport_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  result = (pjsip_transport_state) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1lastError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->lastError = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1lastError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->lastError);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1tlsInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *arg2 = (pj::TlsInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  arg2 = *(pj::TlsInfo **)&jarg2; 
  if (arg1) (arg1)->tlsInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnTransportStateParam_1tlsInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  result = (pj::TlsInfo *)& ((arg1)->tlsInfo);
  *(pj::TlsInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnTransportStateParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnTransportStateParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnTransportStateParam *)new pj::OnTransportStateParam();
  *(pj::OnTransportStateParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnTransportStateParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnTransportStateParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnSelectAccountParam_1rdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnSelectAccountParam **)&jarg1; 
  arg2 = *(pj::SipRxData **)&jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnSelectAccountParam_1rdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnSelectAccountParam **)&jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  *(pj::SipRxData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnSelectAccountParam_1accountIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnSelectAccountParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accountIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnSelectAccountParam_1accountIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnSelectAccountParam **)&jarg1; 
  result = (int) ((arg1)->accountIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnSelectAccountParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnSelectAccountParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnSelectAccountParam *)new pj::OnSelectAccountParam();
  *(pj::OnSelectAccountParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnSelectAccountParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnSelectAccountParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IpChangeParam_1restartListener_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::IpChangeParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->restartListener = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IpChangeParam_1restartListener_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::IpChangeParam **)&jarg1; 
  result = (bool) ((arg1)->restartListener);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IpChangeParam_1restartLisDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::IpChangeParam **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->restartLisDelay = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_IpChangeParam_1restartLisDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::IpChangeParam **)&jarg1; 
  result = (unsigned int) ((arg1)->restartLisDelay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1IpChangeParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::IpChangeParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::IpChangeParam *)new pj::IpChangeParam();
  *(pj::IpChangeParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1IpChangeParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::IpChangeParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RegProgressParam_1isRegister_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RegProgressParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isRegister = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RegProgressParam_1isRegister_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RegProgressParam **)&jarg1; 
  result = (bool) ((arg1)->isRegister);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RegProgressParam_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RegProgressParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RegProgressParam_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::RegProgressParam **)&jarg1; 
  result = (int) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1RegProgressParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::RegProgressParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::RegProgressParam *)new pj::RegProgressParam();
  *(pj::RegProgressParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1RegProgressParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::RegProgressParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = (pjsua_ip_change_op)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (pjsua_ip_change_op) ((arg1)->op);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1transportId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1transportId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1accId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1accId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (int) ((arg1)->accId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1callId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1callId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (int) ((arg1)->callId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1regInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *arg2 = (pj::RegProgressParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  arg2 = *(pj::RegProgressParam **)&jarg2; 
  if (arg1) (arg1)->regInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnIpChangeProgressParam_1regInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  result = (pj::RegProgressParam *)& ((arg1)->regInfo);
  *(pj::RegProgressParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnIpChangeProgressParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnIpChangeProgressParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnIpChangeProgressParam *)new pj::OnIpChangeProgressParam();
  *(pj::OnIpChangeProgressParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnIpChangeProgressParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnIpChangeProgressParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMediaEventParam_1ev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::OnMediaEventParam **)&jarg1; 
  arg2 = *(pj::MediaEvent **)&jarg2; 
  if (arg1) (arg1)->ev = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_OnMediaEventParam_1ev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::OnMediaEventParam **)&jarg1; 
  result = (pj::MediaEvent *)& ((arg1)->ev);
  *(pj::MediaEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1OnMediaEventParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::OnMediaEventParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::OnMediaEventParam *)new pj::OnMediaEventParam();
  *(pj::OnMediaEventParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1OnMediaEventParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::OnMediaEventParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1maxCalls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxCalls = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1maxCalls_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->maxCalls);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1threadCnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1threadCnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1mainThreadOnly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mainThreadOnly = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1mainThreadOnly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (bool) ((arg1)->mainThreadOnly);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1nameserver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2; 
  if (arg1) (arg1)->nameserver = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1nameserver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (pj::StringVector *)& ((arg1)->nameserver);
  *(pj::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1outboundProxies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2; 
  if (arg1) (arg1)->outboundProxies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1outboundProxies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (pj::StringVector *)& ((arg1)->outboundProxies);
  *(pj::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1userAgent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->userAgent = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1userAgent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->userAgent);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunServer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2; 
  if (arg1) (arg1)->stunServer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunServer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (pj::StringVector *)& ((arg1)->stunServer);
  *(pj::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunTryIpv6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunTryIpv6 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunTryIpv6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (bool) ((arg1)->stunTryIpv6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunIgnoreFailure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunIgnoreFailure = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1stunIgnoreFailure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (bool) ((arg1)->stunIgnoreFailure);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1natTypeInSdp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->natTypeInSdp = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1natTypeInSdp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (int) ((arg1)->natTypeInSdp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1mwiUnsolicitedEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mwiUnsolicitedEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1mwiUnsolicitedEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  result = (bool) ((arg1)->mwiUnsolicitedEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1UaConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::UaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::UaConfig *)new pj::UaConfig();
  *(pj::UaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::UaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::UaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1UaConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::UaConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  result = (int) ((arg1)->level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  result = (pj::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1threadId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->threadId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1threadId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  result = (long) ((arg1)->threadId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1threadName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->threadName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogEntry_1threadName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogEntry **)&jarg1; 
  result = (pj::string *) & ((arg1)->threadName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1LogEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::LogEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::LogEntry *)new pj::LogEntry();
  *(pj::LogEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1LogEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::LogEntry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1LogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::LogWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::LogWriter **)&jarg1; 
  arg2 = *(pj::LogEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::LogEntry const & reference is null");
    return ;
  } 
  (arg1)->write((pj::LogEntry const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1LogWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::LogWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::LogWriter *)new SwigDirector_LogWriter(jenv);
  *(pj::LogWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogWriter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::LogWriter *obj = *((pj::LogWriter **)&objarg);
  (void)jcls;
  SwigDirector_LogWriter *director = static_cast<SwigDirector_LogWriter *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogWriter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::LogWriter *obj = *((pj::LogWriter **)&objarg);
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1msgLogging_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msgLogging = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1msgLogging_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->msgLogging);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->level);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1consoleLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->consoleLevel = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1consoleLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->consoleLevel);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1decor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->decor = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1decor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->decor);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (pj::string *) & ((arg1)->filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1fileFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fileFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1fileFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->fileFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1writer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *arg2 = (pj::LogWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = *(pj::LogWriter **)&jarg2; 
  if (arg1) (arg1)->writer = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1writer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  result = (pj::LogWriter *) ((arg1)->writer);
  *(pj::LogWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1LogConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::LogConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::LogConfig *)new pj::LogConfig();
  *(pj::LogConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::LogConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::LogConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1LogConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::LogConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1clockRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1clockRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndClockRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndClockRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndClockRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->sndClockRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1channelCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1channelCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1audioFramePtime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioFramePtime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1audioFramePtime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->audioFramePtime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1maxMediaPorts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxMediaPorts = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1maxMediaPorts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->maxMediaPorts);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1hasIoqueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasIoqueue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1hasIoqueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (bool) ((arg1)->hasIoqueue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1threadCnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1threadCnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1quality_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->quality = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1quality_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->quality);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ptime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ptime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ptime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->ptime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1noVad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noVad = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1noVad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (bool) ((arg1)->noVad);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ilbcMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ilbcMode = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ilbcMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->ilbcMode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1txDropPct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txDropPct = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1txDropPct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->txDropPct);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1rxDropPct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxDropPct = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1rxDropPct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->rxDropPct);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ecOptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecOptions = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ecOptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->ecOptions);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ecTailLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecTailLen = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1ecTailLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->ecTailLen);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndRecLatency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndRecLatency = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndRecLatency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->sndRecLatency);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndPlayLatency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndPlayLatency = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndPlayLatency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->sndPlayLatency);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbInit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbInit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbInit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (int) ((arg1)->jbInit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMinPre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMinPre = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMinPre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (int) ((arg1)->jbMinPre);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMaxPre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMaxPre = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMaxPre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (int) ((arg1)->jbMaxPre);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMax = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1jbMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (int) ((arg1)->jbMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndAutoCloseTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sndAutoCloseTime = arg2;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1sndAutoCloseTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (int) ((arg1)->sndAutoCloseTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1vidPreviewEnableNative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vidPreviewEnableNative = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1vidPreviewEnableNative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  result = (bool) ((arg1)->vidPreviewEnableNative);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1MediaConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::MediaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::MediaConfig *)new pj::MediaConfig();
  *(pj::MediaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::MediaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1MediaConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::MediaConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1uaConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *arg2 = (pj::UaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  arg2 = *(pj::UaConfig **)&jarg2; 
  if (arg1) (arg1)->uaConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1uaConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  result = (pj::UaConfig *)& ((arg1)->uaConfig);
  *(pj::UaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1logConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *arg2 = (pj::LogConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  arg2 = *(pj::LogConfig **)&jarg2; 
  if (arg1) (arg1)->logConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1logConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  result = (pj::LogConfig *)& ((arg1)->logConfig);
  *(pj::LogConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1medConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *arg2 = (pj::MediaConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  arg2 = *(pj::MediaConfig **)&jarg2; 
  if (arg1) (arg1)->medConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1medConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  result = (pj::MediaConfig *)& ((arg1)->medConfig);
  *(pj::MediaConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1readObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode const & reference is null");
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1writeObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::EpConfig **)&jarg1; 
  arg2 = *(pj::ContainerNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::ContainerNode & reference is null");
    return ;
  } 
  try {
    ((pj::EpConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1EpConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::EpConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::EpConfig *)new pj::EpConfig();
  *(pj::EpConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1EpConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::EpConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_PendingJob_1execute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pj::PendingJob *arg1 = (pj::PendingJob *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::PendingJob **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->execute(arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1PendingJob(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::PendingJob *arg1 = (pj::PendingJob *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::PendingJob **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1instance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  try {
    result = (pj::Endpoint *) &pj::Endpoint::instance();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::Endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_new_1Endpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pj::Endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pj::Endpoint *)new SwigDirector_Endpoint(jenv);
  *(pj::Endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_delete_1Endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pj::Endpoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Version result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = ((pj::Endpoint const *)arg1)->libVersion();
  *(pj::Version **)&jresult = new pj::Version((const pj::Version &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    (arg1)->libCreate();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libGetState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsua_state result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (pjsua_state)((pj::Endpoint const *)arg1)->libGetState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::EpConfig *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::EpConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::EpConfig const & reference is null");
    return ;
  } 
  try {
    (arg1)->libInit((pj::EpConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    (arg1)->libStart();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libRegisterThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->libRegisterThread((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libIsThreadRegistered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (bool)(arg1)->libIsThreadRegistered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libStopWorkerThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  (arg1)->libStopWorkerThreads();
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libHandleEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->libHandleEvents(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libDestroy_1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->libDestroy(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1libDestroy_1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    (arg1)->libDestroy();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilStrError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_status_t arg2 ;
  pj::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (pj_status_t)jarg2; 
  result = (arg1)->utilStrError(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilLogWrite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  pj::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  pj::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->utilLogWrite(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilLogWrite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::LogEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::LogEntry & reference is null");
    return ;
  } 
  (arg1)->utilLogWrite(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilVerifySipUri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (pj_status_t)(arg1)->utilVerifySipUri((pj::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilVerifyUri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (pj_status_t)(arg1)->utilVerifyUri((pj::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilTimerSchedule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  pj::Token arg3 = (pj::Token) 0 ;
  pj::Token result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(pj::Token *)&jarg3; 
  try {
    result = (pj::Token)(arg1)->utilTimerSchedule(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::Token *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilTimerCancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  (arg1)->utilTimerCancel(arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilAddPendingJob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::PendingJob *arg2 = (pj::PendingJob *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::PendingJob **)&jarg2; 
  (arg1)->utilAddPendingJob(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1utilSslGetAvailableCiphers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = (arg1)->utilSslGetAvailableCiphers();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::IntVector **)&jresult = new pj::IntVector((const pj::IntVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natDetectType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    (arg1)->natDetectType();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natGetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_stun_nat_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->natGetType();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natUpdateStunServers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natUpdateStunServers((pj::StringVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natCheckStunServers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  pj::Token arg4 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::StringVector const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(pj::Token *)&jarg4; 
  try {
    (arg1)->natCheckStunServers((pj::StringVector const &)*arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natCancelCheckStunServers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natCancelCheckStunServers(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1natCancelCheckStunServers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::Token *)&jarg2; 
  try {
    (arg1)->natCancelCheckStunServers(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsip_transport_type_e arg2 ;
  pj::TransportConfig *arg3 = 0 ;
  pj::TransportId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  arg3 = *(pj::TransportConfig **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::TransportConfig const & reference is null");
    return 0;
  } 
  try {
    result = (pj::TransportId)(arg1)->transportCreate(arg2,(pj::TransportConfig const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = (arg1)->transportEnum();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::IntVector **)&jresult = new pj::IntVector((const pj::IntVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportGetInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  pj::TransportInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    result = (arg1)->transportGetInfo(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::TransportInfo **)&jresult = new pj::TransportInfo((const pj::TransportInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportSetEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->transportSetEnable(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->transportClose(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1transportShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::TransportHandle *)&jarg2; 
  try {
    (arg1)->transportShutdown(arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1hangupAllCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  (arg1)->hangupAllCalls();
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia & reference is null");
    return ;
  } 
  (arg1)->mediaAdd(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia & reference is null");
    return ;
  } 
  (arg1)->mediaRemove(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::AudioMedia **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::AudioMedia const & reference is null");
    return 0;
  } 
  result = (bool)((pj::Endpoint const *)arg1)->mediaExists((pj::AudioMedia const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaMaxPorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaMaxPorts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaActivePorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaActivePorts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaEnumPorts2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMediaVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->mediaEnumPorts2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::AudioMediaVector2 **)&jresult = new pj::AudioMediaVector2((const pj::AudioMediaVector2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1mediaEnumVidPorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::VideoMediaVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->mediaEnumVidPorts();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VideoMediaVector **)&jresult = new pj::VideoMediaVector((const pj::VideoMediaVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1audDevManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudDevManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (pj::AudDevManager *) &(arg1)->audDevManager();
  *(pj::AudDevManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1vidDevManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::VidDevManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  result = (pj::VidDevManager *) &(arg1)->vidDevManager();
  *(pj::VidDevManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1codecEnum2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->codecEnum2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::CodecInfoVector2 **)&jresult = new pj::CodecInfoVector2((const pj::CodecInfoVector2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1codecSetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->codecSetPriority((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1codecGetParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::Endpoint const *)arg1)->codecGetParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::CodecParam **)&jresult = new pj::CodecParam((const pj::CodecParam &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1codecSetParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam arg3 ;
  pj::CodecParam const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(pj::CodecParam **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pj::CodecParam const");
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->codecSetParam((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1videoCodecEnum2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->videoCodecEnum2();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::CodecInfoVector2 **)&jresult = new pj::CodecInfoVector2((const pj::CodecInfoVector2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1videoCodecSetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->videoCodecSetPriority((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1getVideoCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((pj::Endpoint const *)arg1)->getVideoCodecParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::VidCodecParam **)&jresult = new pj::VidCodecParam((const pj::VidCodecParam &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1setVideoCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(pj::VidCodecParam **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::VidCodecParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->setVideoCodecParam((pj::string const &)*arg2,(pj::VidCodecParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1resetVideoCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  pj::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->resetVideoCodecParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1srtpCryptoEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  try {
    result = (arg1)->srtpCryptoEnum();
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return 0;
    }
  }
  *(pj::StringVector **)&jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1handleIpChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IpChangeParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::IpChangeParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::IpChangeParam const & reference is null");
    return ;
  } 
  try {
    (arg1)->handleIpChange((pj::IpChangeParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->info(true).c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onNatDetectionComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnNatDetectionCompleteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnNatDetectionCompleteParam const & reference is null");
    return ;
  } 
  (arg1)->onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onNatDetectionCompleteSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnNatDetectionCompleteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnNatDetectionCompleteParam const & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onNatCheckStunServersComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnNatCheckStunServersCompleteParam const & reference is null");
    return ;
  } 
  (arg1)->onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onNatCheckStunServersCompleteSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnNatCheckStunServersCompleteParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnNatCheckStunServersCompleteParam const & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onTransportState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnTransportStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTransportStateParam const & reference is null");
    return ;
  } 
  (arg1)->onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onTransportStateSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnTransportStateParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTransportStateParam const & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnTimerParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTimerParam const & reference is null");
    return ;
  } 
  (arg1)->onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onTimerSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnTimerParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnTimerParam const & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onSelectAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnSelectAccountParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnSelectAccountParam & reference is null");
    return ;
  } 
  (arg1)->onSelectAccount(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onSelectAccountSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnSelectAccountParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnSelectAccountParam & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onSelectAccount(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onIpChangeProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnIpChangeProgressParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIpChangeProgressParam & reference is null");
    return ;
  } 
  (arg1)->onIpChangeProgress(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onIpChangeProgressSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnIpChangeProgressParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnIpChangeProgressParam & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onIpChangeProgress(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onMediaEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnMediaEventParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnMediaEventParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnMediaEventParam & reference is null");
    return ;
  } 
  (arg1)->onMediaEvent(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1onMediaEventSwigExplicitEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnMediaEventParam *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pj::Endpoint **)&jarg1; 
  arg2 = *(pj::OnMediaEventParam **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pj::OnMediaEventParam & reference is null");
    return ;
  } 
  (arg1)->pj::Endpoint::onMediaEvent(*arg2);
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pj::Endpoint *obj = *((pj::Endpoint **)&objarg);
  (void)jcls;
  SwigDirector_Endpoint *director = static_cast<SwigDirector_Endpoint *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_Endpoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pj::Endpoint *obj = *((pj::Endpoint **)&objarg);
  SwigDirector_Endpoint *director = dynamic_cast<SwigDirector_Endpoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AuthCredInfo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AuthCredInfo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TlsConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::TlsConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_TransportConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::TransportConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatAudio_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::MediaFormat **)&baseptr = *(pj::MediaFormatAudio **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaFormatVideo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::MediaFormat **)&baseptr = *(pj::MediaFormatVideo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMedia_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::Media **)&baseptr = *(pj::AudioMedia **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaPlayer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::AudioMedia **)&baseptr = *(pj::AudioMediaPlayer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AudioMediaRecorder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::AudioMedia **)&baseptr = *(pj::AudioMediaRecorder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDesc_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pjmedia_tone_desc **)&baseptr = *(pj::ToneDesc **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneDigit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pjmedia_tone_digit **)&baseptr = *(pj::ToneDigit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ToneGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::AudioMedia **)&baseptr = *(pj::ToneGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_ExtraAudioDevice_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::AudioMedia **)&baseptr = *(pj::ExtraAudioDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_VideoMedia_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::Media **)&baseptr = *(pj::VideoMedia **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_BuddyConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::BuddyConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountRegConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountRegConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountSipConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountSipConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountCallConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountCallConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountPresConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountPresConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMwiConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountMwiConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountNatConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountNatConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_SrtpOpt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::SrtpOpt **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_RtcpFbConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::RtcpFbConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountMediaConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountMediaConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountVideoConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountVideoConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_AccountConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::AccountConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_JsonDocument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentDocument **)&baseptr = *(pj::JsonDocument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_UaConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::UaConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_LogConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::LogConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_MediaConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::MediaConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_EpConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pj::PersistentObject **)&baseptr = *(pj::EpConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_pjsip_pjsua2_pjsua2JNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[42] = {
    {
      "SwigDirector_AudioMediaPlayer_onEof2", "(Lorg/pjsip/pjsua2/AudioMediaPlayer;)V" 
    },
    {
      "SwigDirector_Buddy_onBuddyState", "(Lorg/pjsip/pjsua2/Buddy;)V" 
    },
    {
      "SwigDirector_Buddy_onBuddyEvSubState", "(Lorg/pjsip/pjsua2/Buddy;J)V" 
    },
    {
      "SwigDirector_FindBuddyMatch_match", "(Lorg/pjsip/pjsua2/FindBuddyMatch;Ljava/lang/String;J)Z" 
    },
    {
      "SwigDirector_Account_onIncomingCall", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onRegStarted", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onRegState", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onIncomingSubscribe", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onInstantMessage", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onInstantMessageStatus", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onTypingIndication", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Account_onMwiInfo", "(Lorg/pjsip/pjsua2/Account;J)V" 
    },
    {
      "SwigDirector_Call_onCallState", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallTsxState", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallMediaState", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallSdpCreated", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onStreamCreated", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onStreamDestroyed", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onDtmfDigit", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallTransferRequest", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallTransferStatus", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallReplaceRequest", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallReplaced", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallRxOffer", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallRxReinvite", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallTxOffer", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onInstantMessage", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onInstantMessageStatus", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onTypingIndication", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallRedirected", "(Lorg/pjsip/pjsua2/Call;J)I" 
    },
    {
      "SwigDirector_Call_onCallMediaTransportState", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCallMediaEvent", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCreateMediaTransport", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_Call_onCreateMediaTransportSrtp", "(Lorg/pjsip/pjsua2/Call;J)V" 
    },
    {
      "SwigDirector_LogWriter_write", "(Lorg/pjsip/pjsua2/LogWriter;J)V" 
    },
    {
      "SwigDirector_Endpoint_onNatDetectionComplete", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onNatCheckStunServersComplete", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onTransportState", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onTimer", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onSelectAccount", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onIpChangeProgress", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    },
    {
      "SwigDirector_Endpoint_onMediaEvent", "(Lorg/pjsip/pjsua2/Endpoint;J)V" 
    }
  };
  Swig::jclass_pjsua2JNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_pjsua2JNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

