/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_pjsua2_WRAP_H_
#define SWIG_pjsua2_WRAP_H_

#include <map>
#include <string>


class SwigDirector_AudioMediaPlayer : public pj::AudioMediaPlayer, public Swig::Director {

public:
    SwigDirector_AudioMediaPlayer(PyObject *self);
    virtual ~SwigDirector_AudioMediaPlayer();
    virtual void onEof2();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class AudioMediaPlayer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_Buddy : public pj::Buddy, public Swig::Director {

public:
    SwigDirector_Buddy(PyObject *self);
    virtual ~SwigDirector_Buddy();
    virtual void onBuddyState();
    virtual void onBuddyEvSubState(pj::OnBuddyEvSubStateParam &prm);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Buddy doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[2];
#endif

};


class SwigDirector_FindBuddyMatch : public pj::FindBuddyMatch, public Swig::Director {

public:
    SwigDirector_FindBuddyMatch(PyObject *self);
    virtual bool match(pj::string const &token, pj::Buddy const &buddy);
    virtual ~SwigDirector_FindBuddyMatch();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class FindBuddyMatch doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_Account : public pj::Account, public Swig::Director {

public:
    SwigDirector_Account(PyObject *self);
    virtual ~SwigDirector_Account();
    virtual void onIncomingCall(pj::OnIncomingCallParam &prm);
    virtual void onRegStarted(pj::OnRegStartedParam &prm);
    virtual void onRegState(pj::OnRegStateParam &prm);
    virtual void onIncomingSubscribe(pj::OnIncomingSubscribeParam &prm);
    virtual void onInstantMessage(pj::OnInstantMessageParam &prm);
    virtual void onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm);
    virtual void onTypingIndication(pj::OnTypingIndicationParam &prm);
    virtual void onMwiInfo(pj::OnMwiInfoParam &prm);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Account doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[8];
#endif

};


class SwigDirector_Call : public pj::Call, public Swig::Director {

public:
    SwigDirector_Call(PyObject *self, pj::Account &acc, int call_id = PJSUA_INVALID_ID);
    virtual ~SwigDirector_Call();
    virtual void onCallState(pj::OnCallStateParam &prm);
    virtual void onCallTsxState(pj::OnCallTsxStateParam &prm);
    virtual void onCallMediaState(pj::OnCallMediaStateParam &prm);
    virtual void onCallSdpCreated(pj::OnCallSdpCreatedParam &prm);
    virtual void onStreamCreated(pj::OnStreamCreatedParam &prm);
    virtual void onStreamDestroyed(pj::OnStreamDestroyedParam &prm);
    virtual void onDtmfDigit(pj::OnDtmfDigitParam &prm);
    virtual void onCallTransferRequest(pj::OnCallTransferRequestParam &prm);
    virtual void onCallTransferStatus(pj::OnCallTransferStatusParam &prm);
    virtual void onCallReplaceRequest(pj::OnCallReplaceRequestParam &prm);
    virtual void onCallReplaced(pj::OnCallReplacedParam &prm);
    virtual void onCallRxOffer(pj::OnCallRxOfferParam &prm);
    virtual void onCallRxReinvite(pj::OnCallRxReinviteParam &prm);
    virtual void onCallTxOffer(pj::OnCallTxOfferParam &prm);
    virtual void onInstantMessage(pj::OnInstantMessageParam &prm);
    virtual void onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm);
    virtual void onTypingIndication(pj::OnTypingIndicationParam &prm);
    virtual pjsip_redirect_op onCallRedirected(pj::OnCallRedirectedParam &prm);
    virtual void onCallMediaTransportState(pj::OnCallMediaTransportStateParam &prm);
    virtual void onCallMediaEvent(pj::OnCallMediaEventParam &prm);
    virtual void onCreateMediaTransport(pj::OnCreateMediaTransportParam &prm);
    virtual void onCreateMediaTransportSrtp(pj::OnCreateMediaTransportSrtpParam &prm);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Call doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[22];
#endif

};


class SwigDirector_LogWriter : public pj::LogWriter, public Swig::Director {

public:
    SwigDirector_LogWriter(PyObject *self);
    virtual ~SwigDirector_LogWriter();
    virtual void write(pj::LogEntry const &entry);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class LogWriter doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_Endpoint : public pj::Endpoint, public Swig::Director {

public:
    SwigDirector_Endpoint(PyObject *self);
    virtual ~SwigDirector_Endpoint();
    virtual void onNatDetectionComplete(pj::OnNatDetectionCompleteParam const &prm);
    virtual void onNatCheckStunServersComplete(pj::OnNatCheckStunServersCompleteParam const &prm);
    virtual void onTransportState(pj::OnTransportStateParam const &prm);
    virtual void onTimer(pj::OnTimerParam const &prm);
    virtual void onSelectAccount(pj::OnSelectAccountParam &prm);
    virtual void onIpChangeProgress(pj::OnIpChangeProgressParam &prm);
    virtual void onMediaEvent(pj::OnMediaEventParam &prm);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Endpoint doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[7];
#endif

};


#endif
